// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@

import "common.info_header.proto";

package common;

//!!BLOCK:HEADER = BEGIN
//!!BLOCK:PUBLICATION DESCRIPTION = BEGIN
//
// Filename: common.health_header.proto
//
// This file defines a common header that is used for all health/state publications.
// The intent of this header is to provide descriptive information of the 
// publication as it is generated by the check and/or action workflow. 
//
// The header does not contain any actual health/state data; such information is
// provided in the data part of the publication in order to support both single-
// and multi-object (repeated group) publications.
//
// The header doesn't define a SQL table; such definitions need to be provided
// in the publications that imports this header.
//
// Note: Timestamps for when the workflow was run is part of the common header;
//       refer to the gen_ts_{lct | utc} fields.
//
//!!BLOCK:PUBLICATION DESCRIPTION = END
//!!BLOCK:HEADER = END

message health_header
{
     //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE
     //!!BLOCK: FIELD DESCRIPTION = BEGIN
     //
     // Import of the common header; documentation is contained in the proto file we're importing.
     //
     //!!BLOCK: FIELD DESCRIPTION = END
     required info_header header = 1;

     //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
     //!!BLOCK: FIELD DESCRIPTION = BEGIN
     //
     // Defines what type of health/state publication has been generated.
     //   0 - baseline. A baseline publication is generated on a periodic interval
     //       in order to create a common baseline for all health/state data in
     //       the instance.
     //   1 - incremental. An incremental publication is generated when a health and/or
     //       state change is detected for an object being checked.
     //   2 - manual. A manual publication is generated when an operator runs the
     //       the workload from a shell prompt passing the publication argument to
     //       the workflow
     // 
     //!!BLOCK: FIELD DESCRIPTION = END
     //!!BLOCK: FIELD RANGE = (0, 1, 2)
     //!!LIST: COLUMN NAME = publication type
     required int32 publication_type = 2;

     //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
     //!!BLOCK: FIELD DESCRIPTION = BEGIN
     //
     // Descripes the interval used for the check in seconds. Combined with the
     // the gen_ts_{lct | utc} fields, it's possible to use this value to 
     // estimate the next time the check workflow will be run.
     //
     // A value of null or 0 means that the check workflow was run manually and, 
     // therefore, it's impposible to calculate the next time the check workflow will run. 
     //
     //!!BLOCK: FIELD DESCRIPTION = END
     //!!LIST: COLUMN NAME = interval between checks
     optional int32 check_interval_sec = 3;

     //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
     //!!BLOCK: FIELD DESCRIPTION = BEGIN
     //
     // Indicates whether the workflow encountered an error. The value of this field
     // represents an enumeration, which is described in spchserror.h.
     //
     //!!BLOCK: FIELD DESCRIPTION = END
     optional int32 error = 4;

     //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
     //!!BLOCK: FIELD DESCRIPTION = BEGIN
     //
     // A short, descriptive textual representation of <error>. The value of this
     // field is documented in spchserror.h.
     //
     //!!BLOCK: FIELD DESCRIPTION = END
     //!!SQL: TYPE = varchar(128) character set ucs2 casespecific
     //!!LIST: COLUMN NAME = error text
     optional string error_text = 5; 
}

