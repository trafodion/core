// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: linuxcounters.memory_metrics_shortbusy_assembled.proto
// Note: requires additional types generated from: common.info_header.proto
namespace linuxcounters
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"memory_metrics_shortbusy_assembled")]
  public partial class memory_metrics_shortbusy_assembled : global::ProtoBuf.IExtensible
  {
    public memory_metrics_shortbusy_assembled() {}
    
    private common.info_header _header;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"header", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public common.info_header header
    {
      get { return _header; }
      set { _header = value; }
    }
    private readonly global::System.Collections.Generic.List<linuxcounters.memory_metrics_shortbusy_assembled.aggregate_buffer> _aggregate = new global::System.Collections.Generic.List<linuxcounters.memory_metrics_shortbusy_assembled.aggregate_buffer>();
    [global::ProtoBuf.ProtoMember(2, Name=@"aggregate", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<linuxcounters.memory_metrics_shortbusy_assembled.aggregate_buffer> aggregate
    {
      get { return _aggregate; }
    }
  
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"aggregate_buffer")]
  public partial class aggregate_buffer : global::ProtoBuf.IExtensible
  {
    public aggregate_buffer() {}
    
    private int _node_id;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"node_id", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public int node_id
    {
      get { return _node_id; }
      set { _node_id = value; }
    }
    private int _memory_percent_used;
    [global::ProtoBuf.ProtoMember(2, IsRequired = true, Name=@"memory_percent_used", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public int memory_percent_used
    {
      get { return _memory_percent_used; }
      set { _memory_percent_used = value; }
    }
    private int _swap_percent_used;
    [global::ProtoBuf.ProtoMember(3, IsRequired = true, Name=@"swap_percent_used", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public int swap_percent_used
    {
      get { return _swap_percent_used; }
      set { _swap_percent_used = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}
