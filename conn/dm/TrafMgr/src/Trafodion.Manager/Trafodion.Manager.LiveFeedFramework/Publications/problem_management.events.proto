// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@

import "common.event_header.proto";

package problem_management;

// tokenized events for errors generated by problem management components
message events
{
     required common.event_header header  =  1; // Common event header for all event messages
     optional string error_string         =  2; // Descriptive text specific to the error
     optional string directory_name       =  3; // The name of the directory associated with the error
     optional string file_name            =  4; // The name of the file associated with the error
     optional int32  file_line_number     =  5; // The line within the file where the error occurred
     optional int32  file_column_number   =  6; // The number of characters into the line where the error occurred
     optional string repository_table     =  7; // The Repository table associated with the error
     optional string repository_column    =  8; // The Repository column associated with the error
     optional string publication_name     =  9; // The Publication name associated with the error
     optional string publication_field    = 10; // The Publication field name associated with the error
     optional string routing_key          = 11; // The routing key associated with the error
     optional int32  sql_error_code       = 12; // Error code from SQL
     optional string sql_error_text       = 13; // Error text from SQL
     optional int32  seabed_error_code    = 14; // Error code from SeaBed
     optional string seabed_function_name = 15; // Name of the SeaBed function that generated the error
     optional string amqp_function_name   = 16; // Name of the AMQP function
     optional int32  amqp_error_code      = 17; // Error code associated with an AMQP operation
     optional string amqp_error_text      = 18; // Error text associated with an AMQP operation
     optional int32  lua_error_code       = 19; // Error code associated with a Lua operation
     optional string lua_error_text       = 20; // Error text associated with a Lua operation
     optional int32  lua_stack_index      = 21; // Lua stack index position
     optional string lua_field_type1      = 22; // Lua field type name
     optional string lua_field_type2      = 23; // Lua field type name
     optional string syscall_name         = 24; // System call name (e.g., open, read, write, etc)
     optional string syscall_arg          = 25; // System call argument
     optional int32  syscall_error_code   = 26; // System call error code (e.g., errno value)
     optional string syscall_error_text   = 27; // System call error text (e.g., strerror(errno))
     optional string conf_lua_source      = 28; // Configuration value for the Lua source directory 
     optional string conf_proto_source    = 29; // Configuration value for the Google Protocol Buffer directory
     optional string conf_context_source  = 30; // Configuration value for the context storage directory
     optional int32 conf_logical_node_count = 31; // Configuration value for the logical node count
     optional string conf_seapilot_source = 32; // Configuration value for the SeaPilot directory
     optional int32  unexpected_phase     = 33; // Unexpected phase value received in timer pop message
}
