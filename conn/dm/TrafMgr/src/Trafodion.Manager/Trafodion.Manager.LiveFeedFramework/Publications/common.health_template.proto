// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@

import "common.health_header.proto";

package health;

//!!BLOCK:HEADER = BEGIN
//!!BLOCK:PUBLICATION DESCRIPTION = BEGIN
//
// *** Change ***
// Filename: common.health_state.proto
// *** Change ***
//
// *** Delete ***
// This file defines a template for health/state publication. This file is
// used when creating a new health/state publication:
//
//   Copy this file to a new .proto file.
//   Edit the file as needed.
// *** Delete ***
//
// *** Change ***
// Describe the purpose of the publication here.
// *** Change ***
//
//!!BLOCK:PUBLICATION DESCRIPTION = END
// *** Change ***
//!!BLOCK:SQL:TABLENAME = Health_Overview_Table
// *** Change ***
//!!BLOCK:HEADER = END

// *** Change ***
message health_template
// *** Change ***
{
    // *** Change ***
    message health_template_data_struct
    // *** Change ***
    {
        // ***
        // The following fields are standard in all health/state publications. Don't change these.
        // ***

        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // An enumeration of the object type .
        // The enumeration is defined in the spobjecttype.h file and in the 
        // dimension.dimension_objecttype_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
        //!!LIST: COLUMN NAME = logical object type
        required int32 logical_object_type = 1;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // An enumeration of the object subtype .
        // The enumeration is defined in the spobjectsubtype.h file and in the 
        // dimension.dimension_objectsubtype_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (null, 0, 1, 2, ...)
        //!!LIST: COLUMN NAME = logical object subtype
        optional int32 logical_object_subtype = 2;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The logical name of the object for which we're reporting information. 
        // Logical means the name .
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = char(32) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = logical object name
        required string logical_object_name = 3;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // Further qualifier of logical name of the object for which we're
        // reporting information. Logical means the name .
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = varchar(128) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = logical object qualifier
        optional string logical_object_qual_1 = 4; 
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // Further qualifier of logical name of the object for which we're
        // reporting information. Logical means the name as represented in 
        // the software.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = varchar(128) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = logical object qualifier
        optional string logical_object_qual_2 = 5; 
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // Path qualifier of logical name of the object for which we're
        // reporting information. Logical means the name .
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = char(4) character set ucs2 casespecific
        //!!BLOCK: FIELD RANGE = (null, "NONE", "ALL", "P", "B", "M", "MB")
        //!!LIST: COLUMN NAME = logical object path 
        optional string logical_object_path = 6;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // An enumeration of the object type as represented at the Linux level.
        // The enumeration is defined in the spobjecttype.h file and in the 
        // dimension.dimension_objecttype_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
        //!!LIST: COLUMN NAME = physical object type
        optional int32 physical_object_type = 7;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // An enumeration of the object subtype as represented at the Linux level.
        // The enumeration is defined in the spobjecttype.h file and in the 
        // dimension.dimension_objecttype_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
        //!!LIST: COLUMN NAME = physical object subtype
        optional int32 physical_object_subtype = 8;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The physical name of the object for which we're reporting information.
        // Physical means the name as represented at the Linux level.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = varchar(128) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = physical object name
        optional string physical_object_name = 9;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // An enumeration of the current state of the object. The enumeration is 
        // defined in the spstate.h file and in the dimension.dimension_state_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
        //!!LIST: COLUMN NAME = current state
        optional int32 current_state = 10;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The current state as reported before normalization. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = varchar(32) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = current state original
        optional string current_state_raw = 11;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // An enumeration of the previous state of the object. The enumeration is 
        // defined in the spstate.h file and in the dimension.dimension_state_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
        //!!LIST: COLUMN NAME = previous state
        optional int32 previous_state = 12;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The previous state as reported before normalization. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = varchar(32) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = previous state original
        optional string previous_state_raw = 13;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The time a state change was detected in LCT format. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!LIST: COLUMN NAME = time when state changed (LCT)
        optional int64 state_change_ts_lct = 14;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The time a state change was detected in UTC format. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!LIST: COLUMN NAME = time when state changed (UTC)
        optional int64 state_change_ts_utc = 15; 
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // An enumeration of the current health of the object. The enumeration is defined
        // in the sphealth.h file and in the dimension.dimension_health_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
        //!!LIST: COLUMN NAME = current health
        optional int32 current_health = 16;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The current health as reported before normalization. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = varchar(32) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = current health original
        optional string current_health_raw = 17;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION=BEGIN
        //
        // An enumeration of the previous health of the object. The enumeration is defined
        // in the sphealth.h file and in the dimension.dimension_health_table table.
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
        //!!LIST: COLUMN NAME = previous health
        optional int32 previous_health = 18;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The previous health as reported before normalization. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!SQL: TYPE = varchar(32) character set ucs2 casespecific
        //!!LIST: COLUMN NAME = previous health original
        optional string previous_health_raw = 19;
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The time a health change was detected in LCT format. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!LIST: COLUMN NAME = time when health changed (LCT)
        optional int64 health_change_ts_lct = 20; 
   
        //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
        //!!BLOCK: FIELD DESCRIPTION = BEGIN
        //
        // The time a health change was detected in UTC format. 
        //
        //!!BLOCK: FIELD DESCRIPTION = END
        //!!LIST: COLUMN NAME = time when health changed (UTC)
        optional int64 health_change_ts_utc = 21; 

        // *** Add if necessary ***
        // Add publication-specific fields here as needed.
        // *** Add if necessary ***
    } // of repeated field

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // Import of the common header; documentation is contained in the proto file
    // we're importing.
    //!!BLOCK: FIELD DESCRIPTION = END
    required common.health_header header = 1;

    //*** Modify if necessary
    //
    // You may need to add additional fields here, either before or after the repeated field.
    //
    // If you do add fields, then remember that you may need to change the numbering in the
    // repeated field definition above.
    //
    //*** Modify if necessary

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    repeated health_template_data_struct data = 2;

}

