//
// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2007-2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@
//

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace Trafodion.Manager.Framework.Controls
{

    /// <summary>
    /// This is the windows manager form, the graphical component of window management
    /// </summary>
    public partial class WindowsManagerForm : TrafodionForm
    {

        /// <summary>
        /// Constructor
        /// </summary>
        public WindowsManagerForm()
        {

            // Call the code generated by the form designer
            InitializeComponent();

            // Create a selection change handler for the data grid view
            theManagedWindowsDataGridView_SelectionChangedEventHandler = new EventHandler(theManagedWindowsDataGridView_SelectionChanged);

            // Create a data grid view having all of the managed windows in it
            theManagedWindowsDataGridView = new ManagedWindowsDataGridView();

            // Give it a border
            theManagedWindowsDataGridView.BorderStyle = BorderStyle.FixedSingle;

            // Add the event selection changed event handler to it
            theManagedWindowsDataGridView.SelectionChanged += theManagedWindowsDataGridView_SelectionChangedEventHandler;

            // Tell it to fill its space
            theManagedWindowsDataGridView.Dock = DockStyle.Fill;
            Controls.Add(theManagedWindowsDataGridView);

            // Make sure that nothing obscures it
            theManagedWindowsDataGridView.BringToFront();

            // make the controls consistent
            UpdateControls();

        }

        /// <summary>
        /// Called when the selection(s) in the grid chnage
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void theManagedWindowsDataGridView_SelectionChanged(object sender, EventArgs e)
        {
            UpdateControls();
        }

        /// <summary>
        /// Called when the user clicks the activate button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param> 
        private void theActivateButton_Click(object sender, EventArgs e)
        {
            DoActivateButton();
        }

        /// <summary>
        /// Activate all of the selected windows
        /// </summary>
        private void DoActivateButton()
        {

            // Loop over the selections
            foreach (ManagedWindow theManagedWindow in theManagedWindowsDataGridView.SelectedManagedWindows)
            {

                // Bring each to the front
                theManagedWindow.BringToFront();

            }

            // Make sure that we, the windows manager form, do not get obscured
            //BringToFront(); // Disabled because it was confusing to some users.

        }

        /// <summary>
        /// Called when the user clicks the close windows button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void theCloseWindowsButton_Click(object sender, EventArgs e)
        {
            DoCloseWindowsButton();
        }

        /// <summary>
        /// Close the selected windows
        /// </summary>
        private void DoCloseWindowsButton()
        {

            // Loop over the selections
            foreach (ManagedWindow theManagedWindow in theManagedWindowsDataGridView.SelectedManagedWindows)
            {

                // Close each window
                theManagedWindow.Close();
            }

            // Check to see if there are still any managed windows
            if (WindowsManager.ManagedWindowsCount == 0)
            {

                // There are not.  Make sure that the main window is visible
                WindowsManager.ActivateMainWindow();

                // But make sure that we are in front of it.
                BringToFront();

            }
        }

        /// <summary>
        /// Called when the user clicks the OK button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void theOKButton_Click(object sender, EventArgs e)
        {
            Close();
        }

        /// <summary>
        /// Call wehenver anything changes to make sure that all controls are consistent
        /// </summary>
        private void UpdateControls()
        {

            // Count the selected rows
            int theRowsSelectedCount = theManagedWindowsDataGridView.SelectedRows.Count;

            // Enable Activate button if any rows are selected
            theActivateButton.Enabled = (theRowsSelectedCount > 0);

            // Enable Close button if any rows are selected
            theCloseWindowsButton.Enabled = (theRowsSelectedCount > 0);

        }

        /// <summary>
        /// The grid of managed windows
        /// </summary>
        private ManagedWindowsDataGridView theManagedWindowsDataGridView;

        /// <summary>
        /// Bring the main window to the front
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void theBringMainWindowToFrontButton_Click(object sender, EventArgs e)
        {
            WindowsManager.ActivateMainWindow();

            // Make sure that we, the windows manager form, do not get obscured
            //BringToFront(); // Disabled because it was confusing to some users.

        }

        private EventHandler theManagedWindowsDataGridView_SelectionChangedEventHandler;

    }
}
