//
// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2007-2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@
//

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace Trafodion.Manager.Framework.Controls
{

    /// <summary>
    /// Dialog that asks a question and collects a text answer
    /// </summary>
    public partial class GetStringDialog : TrafodionForm
    {

        /// <summary>
        /// For the form designer to work
        /// </summary>
        public GetStringDialog() : this("", "")
        {
        }

        /// <summary>
        /// Ask a question
        /// </summary>
        /// <param name="aTitle">The base dialog title</param>
        /// <param name="aPrompt">The question (or prompt)</param>
        public GetStringDialog(string aTitle, string aPrompt)
        {

            // Call the code generated by the form designer
            InitializeComponent();

            // Save the title and prompt
            Text = aTitle;
            thePromptLabel.Text = aPrompt;

            // Make the control state consistent
            UpdateControls();

        }

        /// <summary>
        /// Called when the OK button is clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void theOKButton_Click(object sender, EventArgs e)
        {
            DialogResult = DialogResult.OK;
            Close();
        }

        /// <summary>
        /// Property to get or set the string result
        /// </summary>
        public string TheString
        {
            get
            {
                return theTextBox.Text.Trim();
            }
            set
            {
                theTextBox.Text = value.Trim();
            }
        }

        /// <summary>
        /// Property to get or set the error message
        /// </summary>
        public string TheErrorMessage
        {
            get
            {
                return theErrorMessageLabel.Text.Trim();
            }
            set
            {
                theErrorMessageLabel.Text = value.Trim();
            }
        }

        /// <summary>
        /// Called when the text of the string changes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void theTextBox_TextChanged(object sender, EventArgs e)
        {
            UpdateControls();
        }

        /// <summary>
        /// Call whenever any state changes to keep controls consistent
        /// </summary>
        private void UpdateControls()
        {

            // Assume that there is no error yet on this pass
            TheErrorMessage = "";

            // Let a derived class, if any, decide whether the string is "OK"
            theOKButton.Enabled = EnableOKButton();

        }

        /// <summary>
        /// Override this to allow control of whether or not the sting is "OK"
        /// </summary>
        /// <returns></returns>
        protected virtual bool EnableOKButton()
        {

            // Default is that everything is OK
            return true;

        }
    }

}
