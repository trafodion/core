//
// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2007-2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@
//

using System;
using System.Drawing;
using System.Windows.Forms;

namespace Trafodion.Manager.Framework.Controls
{

    /// <summary>
    /// This class makes a tab page look right for Trafodion and adds special behaviors to it as well.
    /// </summary>
    public class TrafodionTabPage : TabPage
    {
    
        /// <summary>
        /// Default constructor for the UI designer.
        /// </summary>
        public TrafodionTabPage()
        {
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="aName">The text to put on the tab</param>
        public TrafodionTabPage(string aName)
            : base(aName)
        {
            
            // Call the code generated by the form designer
            InitializeComponent();
            this.Font = new Font("Tahoma", 8.25F, FontStyle.Regular);

            // Make this tab look right
            Stylize(this);

            // We need to know when controls are added or remove3d
            ControlAdded += new ControlEventHandler(TrafodionTabPage_ControlsChanged);
            ControlRemoved += new ControlEventHandler(TrafodionTabPage_ControlsChanged);

            //Initialize helpprovider for context sensitive help.  More work is needed in
            //derived classes.
            _helpProviderTrafodionTabPage = new HelpProvider();
            _helpProviderTrafodionTabPage.HelpNamespace = TrafodionHelpProvider.TrafodionHelpFile;
            _helpProviderTrafodionTabPage.SetHelpNavigator(this, System.Windows.Forms.HelpNavigator.TableOfContents);
            _helpProviderTrafodionTabPage.SetShowHelp(this, true);

            if (HelpTopic != null)
            {
                _helpProviderTrafodionTabPage.SetHelpKeyword(this, HelpTopic);
            }
            
        }

        /// <summary>
        /// Returns the helpprovider assigned to TrafodionTabPage
        /// This allows the derived class to change help properties if needed.  
        /// </summary>
        public HelpProvider HelpProviderTrafodionTabPage
        {
            get { return _helpProviderTrafodionTabPage; }

        }

        virtual public String HelpTopic 
        {
            get { return null; }
        
        }

        /// <summary>
        /// Called whenever controls are added to or removed from the tab page so that we can decide
        /// what embellishments the tab needs based on the control(s) present in the page.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void TrafodionTabPage_ControlsChanged(object sender, ControlEventArgs e)
        {

            // Get the tab redrawn in case we need to show that we now can/cannot clone the tab
            if (Parent != null)
            {
                Parent.Invalidate(false);
            }

        }

        /// <summary>
        /// Make an arbitrary tab page look right for Trafodion
        /// </summary>
        /// <param name="aTabPage">The tab page</param>
        public static void Stylize(TrafodionTabPage aTabPage)
        {
            //aTabPage.BackColor = Color.WhiteSmoke;
            aTabPage.BorderStyle = BorderStyle.FixedSingle;
        }

        /// <summary>
        /// Read only property indicating whether or not this tab can be cloned to a window
        /// </summary>
        public bool CanCloneToWindow
        {
            get
            {

                // The tab can be cloned if it contains exactly one control and that one
                // control implements ICloneToWindow
                return ((Controls.Count == 1) && (Controls[0] is ICloneToWindow));
            }
        }

        /// <summary>
        /// Generated by the form designer
        /// </summary>
        private void InitializeComponent()
        {
            this.SuspendLayout();
            this.ResumeLayout(false);

        }
        private HelpProvider _helpProviderTrafodionTabPage; 
    }
}
