//
// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2007-2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Trafodion.Manager.Framework;
using Trafodion.Manager.Framework.Connections;
using Trafodion.Manager.Framework.Connections.Controls;
using Trafodion.Manager.Framework.Controls;
using Trafodion.Manager.Framework.Favorites;
using Trafodion.Manager.MetricMiner.Controls;
using Trafodion.Manager.OverviewArea.Controls;
using Trafodion.Manager.LiveFeedMonitoringArea.Controls;
using Trafodion.Manager.LiveFeedFramework.Models;
using Microsoft.Win32;
using Trafodion.Manager.OverviewArea;
using Trafodion.Manager.DatabaseArea.Controls;

namespace Trafodion.Manager.Main
{
    // Delegate used by filewatcher to load area
    public delegate int LoadAreaCallback(string areaName);
  
    /// <summary>
    /// This is the main window and main program for One GUI.
    /// 
    /// It discovers, instantiates the various areas, and lets the user
    /// switch between them.  Note that areas to be instantiated are currently hardcoded.
    /// 
    /// The framework owns the menu bar and no other components should use the menu bar until such
    /// time as the framework includes a suitable sharing mechanism.
    /// </summary>
    public class TrafodionMain : TrafodionForm, ITrafodionMain, IOptionsProvider
    {

        #region Variables

        /// <summary>
        /// Variables generated by form designer
        /// </summary>
        private System.ComponentModel.IContainer components;
        private TrafodionPanel theActiveRightPanePane;
        private TrafodionSplitContainer theLeftRightSplitContainer;
        private TrafodionPanel theLeftPane;
        private TrafodionPanel theAreaButtonsPane;
        private TrafodionPanel theActiveNavigatorPane;
        private static TrafodionToolStripRenderer theToolStripRenderer = new TrafodionToolStripRenderer(new CustomProfessionalColors(), false);
        private TrafodionToolStrip theActiveAreaLabelPane;
        private TrafodionPanel theMainPanel;
        private TrafodionMenuStrip theMainMenuBar;
        private ToolStripMenuItem lockStripMenuItem;

        private List<string> hiddenAreaNames = new List<string>();
        private Dictionary<String, IOptionsProvider> _optionProviders = new Dictionary<String, IOptionsProvider>();
        private FileSystemWatcher _areaWatcher = new FileSystemWatcher();
        private MenuManager theMenuManager = new MenuManager();
        private TrafodionToolBarManager theToolBarManager = new TrafodionToolBarManager();
        private TrafodionForm _helpContainerForm = new TrafodionForm();

        private Version _frameworkVersion = null;
        private static NCIHandler _nciHandler;
        private static SQLWhiteboardHandler _sqlWhiteboardHandler;
        #endregion Variables

        /// <summary>
        /// The persistence key for main app state
        /// </summary>
        private static readonly string PersistenceKey = "TrafodionMain";
        
        /// <summary>
        /// These variables shall be used to persist the properties of
        /// TrafodionMain
        /// </summary> 
        private static readonly string ActiveArea = "ActiveArea";
        private static readonly string TrafodionMainSize = "TrafodionMainSize";
        private static readonly string TrafodionMainWindowState = "TrafodionMainWindowState";


        /// <summary>
        /// The persistence key for hidden areas
        /// </summary>
        private static readonly string HiddenAreasPersistenceKey = "HiddenAreas";

        private static readonly string HpTrafodion = "Trafodion.Manager";

        private int maxHeight = 0;
        private int maxWidth = 0;

        private Dictionary<string, string> _pluginExceptions = new Dictionary<string,string>();
        private TrafodionStatusBar theStatusBar;
        private TrafodionToolStrip theMainToolBar;

        private Trafodion.Manager.Framework.MainMenu _theMainMenu = new Trafodion.Manager.Framework.MainMenu();
        private TrafodionPanel TrafodionPanel;
        private TrafodionBannerControl TrafodionBannerControl;
        private Trafodion.Manager.Framework.MainToolBar _frameworkToolBar;
        private TabbedMetricMinerControl _theTabbedMetricMinerControl;

        List<string> ignoredAssemblies = new List<string>() { 
            "Plugins\\Trafodion.Manager.dll",
            "Plugins\\HPOneVoice20.dll",
            "Plugins\\ZedGraph.dll",
            "Plugins\\TenTec.Windows.iGridLib.iGrid.dll",
            "Plugins\\PluginLoader.dll",
            "Plugins\\Trafodion.Manager.MetricMiner.dll",
            "Plugins\\Trafodion.Manager.UniversalWidget.dll",
            "Plugins\\System.Windows.Forms.DataVisualization.dll",
            "Plugins\\Trafodion.Manager.AMQPWidgetCommon.dll",
            "Plugins\\Trafodion.Manager.AMQPFramework.dll",
            "Plugins\\Trafodion.Manager.SQFramework.dll",
            "Plugins\\log4net.dll",
            "Plugins\\qpid.client.dll",
            "Plugins\\protobuf-net.dll",
            "Plugins\\Trafodion.Manager.QPV.dll",
            "Plugins\\Newtonsoft.Json.dll"
        };

        List<string> disabledAssemblies = new List<string>()
        {
            "Plugins\\Trafodion.Manager.BDRArea.dll",
            "Plugins\\Trafodion.Manager.ConnectivityArea.dll",
            //"Plugins\\Trafodion.Manager.OverviewArea.dll",
            "Plugins\\Trafodion.Manager.UserManagement.dll",
            "Plugins\\Trafodion.Manager.WorkloadArea.dll",
            "Plugins\\Trafodion.Manager.LiveFeedMonitoringArea.dll",
            "Plugins\\Trafodion.Manager.SpaceManagement.dll",
        };

        public string ActiveAreaName
        {
            get { return AreaManager.ActiveTrafodionAreaName; }
        }

        public TrafodionForm HelpContainerForm
        {
            get { return _helpContainerForm; }
        }

        /// <summary>
        /// This is a method that lets any component decide if a control is currently 
        /// available in the main window.  This can be used by an component to adjust its 
        /// behavior.
        /// </summary>
        /// <param name="aControl">The control in question</param>
        /// <returns>True if the control's parent chain leads up to area
        /// controls in the navigation pane or the right pane.</returns>
        public bool IsControlInActiveTrafodionArea(Control aControl)
        {

            // Get the active area from the area manager.
            ITrafodionArea theIActiveTrafodionArea = AreaManager.ActiveITrafodionArea;

            // Check to see if there is an active area.  There should always be one.
            if (theIActiveTrafodionArea != null)
            {

                // Get the navigator and right pane controls for the active area.
                Control theActiveNavigator = theIActiveTrafodionArea.Navigator;
                Control theActiveRightPane = theIActiveTrafodionArea.RightPane;

                // Start with the parent of the control in question
                Control theParent = aControl.Parent;

                // Climb the control tree
                while (theParent != null)
                {
                    // Check to see if the current parent is the navigator or right pane control for the active area.
                    if ((theParent == theActiveNavigator) || (theParent == theActiveRightPane))
                    {

                        // It is, we're done
                        return true;

                    }

                    // Otherwise keep climbing the control tree
                    theParent = theParent.Parent;

                }
            }

            // There was no active area or we burst through the top of the control tree
            // without a match
            return false;

        }

        /// <summary>
        /// The main application object.  It is a singleton.
        /// </summary>
        public TrafodionMain()
        {
            Application.EnableVisualStyles();
            Application.DoEvents();
            this.Hide();
            Thread splashthread = new Thread(new ThreadStart(TrafodionSplashScreen.ShowSplashScreen));
            splashthread.IsBackground = true;
            splashthread.Start();
            InitializeComponent();

            this.SizeChanged += new EventHandler
            (
                (sender, e) =>
                {
                    // If the window has ever been maximized, record its max height and max width
                    if (this.WindowState == FormWindowState.Maximized)
                    {
                        this.maxHeight = this.ClientSize.Height;
                        this.maxWidth = this.ClientSize.Width;
                    }
                    else if (this.WindowState == FormWindowState.Normal)
                    {
                        // If the window has ever been maximized, the loacation should be explicitly set to center screen, otherwize "CenterToScreen()" does not work
                        if (this.maxHeight > 0)
                        {
                            this.Location = new Point((this.maxWidth - this.ClientSize.Width) / 2, (this.maxHeight - this.ClientSize.Height) / 2);
                        }

                        this.CenterToScreen();
                    }
                    
                }
            );
        }

        private void TrafodionMain_Load(object sender, EventArgs e)
        {

            //Add a reference of this class in the Context
            TrafodionContext.Instance.TheTrafodionMain = this;

            //System.AppDomain.CurrentDomain.SetupInformation.PrivateBinPath = Path.Combine(Application.StartupPath, "Plugins");
            System.AppDomain.CurrentDomain.AppendPrivatePath(Application.StartupPath + "\\Plugins");
            System.AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);

#if DEBUG
            // Show all of the environment variables
            WriteEnvironmentToConsole();

            // Show connection opens and closes as they occur
            Connection.Opened += new Connection.OpenedHandler(ConnectionOpened);
            Connection.Closed += new Connection.ClosedHandler(ConnectionClosed);
#endif
            // Let the windows manager (also a singleton) know that the main window is us
            WindowsManager.MainWindow = this;

            theActiveAreaLabelPane.Renderer = theToolStripRenderer;
            //Populate the main menu bar
            this.associateMenuHandlers();
            this.theMainMenuBar.Name = global::Trafodion.Manager.Properties.Resources.TrafodionMenuStrip;
            this.theMainMenuBar.Renderer = new TrafodionToolStripRenderer(new ProfessionalColorTable());
            this.theMainMenuBar.AllowMerge = true;
            this._theMainMenu.TheMainMenuBar.AllowMerge = true;
            this._theMainMenu.MainWindowToolStripMenuItem.Visible = false;
            this._theMainMenu.CloneThisWindowToolStripMenuItem.Visible = false;
            
            //Merge the menu strip from MainMenu with the empty menu strip of TrafodionMain
            System.Windows.Forms.ToolStripManager.Merge(this._theMainMenu.TheMainMenuBar, this.theMainMenuBar);

            //Populate the main tool bar
            _frameworkToolBar = new Trafodion.Manager.Framework.MainToolBar(_theMainMenu);
            theMainToolBar.Renderer = new TrafodionToolStripRenderer(new ProfessionalColorTable(), false);

            //Merge the toolbar strip from framework with the empty toolbar of TrafodionMain
            ToolStripManager.Merge(_frameworkToolBar.TheFrameWorkToolBar, theMainToolBar);

            // Tell the area manager where our panes are
            AreaManager.TheActiveAreaLabelPane = theActiveAreaLabelPane;
            AreaManager.TheActiveNavigatorPane = theActiveNavigatorPane;
            AreaManager.TheAreaButtonsPane = theAreaButtonsPane;
            AreaManager.TheActiveRightPanePane = theActiveRightPanePane;

            // Create everything that needs to be reloaded with its persisted state before we read the
            // default persistence file
            TrafodionSplashScreen.UpdateProgressText(global::Trafodion.Manager.Properties.Resources.ProductName + " : Loading assemblies...");
            
#if FOR_DEMO
            LoadArea("SampleArea");
#endif

            // Discover areas to load
            string[] theAssemblyNames = System.IO.Directory.GetFiles("Plugins\\", "*.dll");

            List<string> theSuccessfulAssemblies = new List<string>();
            List<string> theIncompatibleAssemblies = new List<string>();


            // Get the Framework Version
            foreach (Assembly currAssembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                if (currAssembly.GetName().Name.Equals(HpTrafodion))
                {
                    _frameworkVersion = currAssembly.GetName().Version;
                    break;
                }
            }

            // Load the plugins
            foreach (string currAssemblyName in theAssemblyNames)
            {
                // Skip the ignored and disabled Assemblies
                if (!ignoredAssemblies.Contains(currAssemblyName) && !disabledAssemblies.Contains(currAssemblyName))
                {
                    int loadStatus = LoadArea(currAssemblyName);

                    // If unable to load area, add to failed assemblies
                    if (loadStatus != PluginLoader.Loader.Ok)
                    {
                            switch (loadStatus)
                            {
                                case PluginLoader.Loader.Incompatible:
                                    theIncompatibleAssemblies.Add(currAssemblyName);
                                    break;
                               
                                case PluginLoader.Loader.Trafodionarea_not_found:
                                    // Ignore .dlls that don't implement ITrafodionArea
                                    break;

                                case PluginLoader.Loader.Exception:
                                    // stacktrace already added to pluginexception dictionary
                                    break;

                                default:                                    
                                    break;
                            }
                    }
                    else
                    {
                        theSuccessfulAssemblies.Add(currAssemblyName);
                    }
                }
            }

            TrafodionSplashScreen.UpdateProgressText(global::Trafodion.Manager.Properties.Resources.ProductName + " : Reading Persistence data...");

            // Initialize the connection definitions world
            ConnectionDefinition.Initialize();

            // We ourselves need to reload persisted state
            Persistence.PersistenceHandlers += new Persistence.PersistenceHandler(TrafodionMainPersistence);

            string errorMessage = "";
            PersistenceNotCompletedLoadedException pnclException = null;

            try
            {
                // Tell the persistence world to restore all
                Persistence.RestoreAllFromDefault();
            }
            catch (PersistenceNotCompletedLoadedException pex)
            {
                pnclException = pex;
                errorMessage = pex.Message;
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
            
            this.CenterToScreen(); 
            this.Show();
            TrafodionSplashScreen.CloseSplashScreen();
            
            // Hide areas that were previously hidden
            foreach (AreaManager theManager in AreaManager.AreaManagers)
            {
                if (hiddenAreaNames.Contains(theManager.TheITrafodionArea.AreaName))
                {
                    theManager.HideArea();
                }
            }

            // Make sure there is an active area
            UpdateActivatedArea();

            // Setup the file watcher to dynamically load assemblies
            _areaWatcher.Path = Application.StartupPath + "\\Plugins";
            _areaWatcher.Filter = "*.dll";
            _areaWatcher.EnableRaisingEvents = true;
            _areaWatcher.Created += new FileSystemEventHandler(_areaWatcher_DetectedNewPlugin);

            _helpContainerForm.CreateControl();

            //Create the handler for the tools
            _nciHandler = new NCIHandler();
            _optionProviders.Add(global::Trafodion.Manager.Properties.Resources.NCI, _nciHandler);

            //Create the handler for SQLWhitebard
            _sqlWhiteboardHandler = new SQLWhiteboardHandler();

            //To enable the SQL Whiteboard option
            _optionProviders.Add(Properties.Resources.SQLWhiteboard, _sqlWhiteboardHandler);

            //Start error logger.
            Logger.StartErrorLog();
            this.Activate();

            //this.BringToFront();
            // Dialog that shows invalid assemblies
            if (theIncompatibleAssemblies.Count + _pluginExceptions.Count > 0)
            {
                PluginErrorDialog thePluginErrorDialog = new PluginErrorDialog(theIncompatibleAssemblies, _pluginExceptions);
                thePluginErrorDialog.ShowDialog();

            }

            if (pnclException != null)
            {
                TrafodionMultipleMessageDialog md = new TrafodionMultipleMessageDialog(errorMessage, pnclException.ErrorTable, System.Drawing.SystemIcons.Warning);
                md.BringToFront();
                md.ShowDialog();
            }
            else
            if (!string.IsNullOrEmpty(errorMessage))
            {
                MessageBox.Show(errorMessage, Properties.Resources.Error, MessageBoxButtons.OK);
            }

            //LiveFeedConnectionRegistry.Instance.Activate();

            // Start in the center of the screen
            StartPosition = FormStartPosition.CenterScreen;
            this.MinimumSize = new Size(800, 600);
        }

        Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            //This handler is called only when the common language runtime tries to bind to the assembly and fails.
            string strTempAssmbPath = "";
            Assembly MyAssembly = null;
            string argAssemblyName = args.Name.Contains(",") ? args.Name.Substring(0, args.Name.IndexOf(",")) : args.Name;

            if ("externallistenermanaged".Equals(argAssemblyName))
            {
                RegistryKey theRegistryKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Hewlett-Packard\HP Live Feed", false);
                if (theRegistryKey != null)
                {
                    strTempAssmbPath = (string)theRegistryKey.GetValue("InstallDir");
                    theRegistryKey.Close();
                }

                if (string.IsNullOrEmpty(strTempAssmbPath))
                {
                    if (Utilities.Is64bitOS())
                    {
                        //Build the path of the assembly from where it has to be loaded.				
                        strTempAssmbPath = @"C:\Program Files (x86)\Hewlett-Packard\HP Manageability Live Feed 1.0.0\bin\" + argAssemblyName + ".dll";
                    }
                    else
                    {
                        strTempAssmbPath = @"C:\Program Files\Hewlett-Packard\HP Manageability Live Feed 1.0.0\bin\" + argAssemblyName + ".dll";
                    }
                }
                else
                {
                    strTempAssmbPath = Path.Combine(strTempAssmbPath, "bin");
                    strTempAssmbPath = Path.Combine(strTempAssmbPath, "externallistenermanaged.dll");
                }
                //Load the assembly from the specified path. 					
                MyAssembly = Assembly.LoadFrom(strTempAssmbPath);
            }

            //Return the loaded assembly.
            return MyAssembly;	
        }

        private void associateMenuHandlers()
        {
            this._theMainMenu.ExitToolStripMenuItem.Click                   += new System.EventHandler(this.exitToolStripMenuItemClick);
            this._theMainMenu.CustomizeAreasToolStripMenuItem.Click         += new System.EventHandler(this.customizeAreasToolStripMenuItem_Click);
            this._theMainMenu.SqlWhiteboardToolStripMenuItem.Click += new System.EventHandler(this.sqlWhiteboardToolStripMenuItem_Click);
            this._theMainMenu.MetricMinerToolStripMenuItem.Click += new EventHandler(MetricMinerToolStripMenuItem_Click);
            this._theMainMenu.NCIToolStripMenuItem.Click += new System.EventHandler(this.NCIToolStripMenuItem_Click);
            this._theMainMenu.TheSystemsToolStripMenuItem.Click             += new System.EventHandler(this.theSystemsToolStripMenuItemClick);
            this._theMainMenu.OptionsToolStripMenuItem.Click                += new System.EventHandler(this.optionsToolStripMenuItem_Click);
            this._theMainMenu.TheWindowsToolStripMenuItem.DropDownOpening   += new System.EventHandler(this.TheWindowsToolStripMenuItemDropDownOpening);
            this._theMainMenu.ToolsToolStripMenuItem.DropDownOpening        += new System.EventHandler(ToolsToolStripMenuItem_DropDownOpening);
            this._theMainMenu.LiveEventsToolStripMenuItem.Click             += new System.EventHandler(LiveEventsToolStripMenuItem_Click);
            this._theMainMenu.RepositoryEventsToolStripMenuItem.Click       += new System.EventHandler(RepositoryEventsToolStripMenuItem_Click);
            this._theMainMenu.LiveAuditLogsToolStripMenuItem.Click          += new System.EventHandler(LiveAuditLogsToolStripMenuItem_Click);
            this._theMainMenu.SecurityAuditLogsViewerToolStripMenuItem.Click    += new System.EventHandler(RepositoryAuditLogsToolStripMenuItem_Click);
            this._theMainMenu.SecurityAuditLogConfigurationToolStripMenuItem.Click += new EventHandler(SecurityAuditLogConfigurationToolStripMenuItem_Click);
            this._theMainMenu.DownloadOSIMDataToolStripMenuItem.Click += new EventHandler(downloadOSIMDataToolStripMenuItem_Click);
            this._theMainMenu.LDAPConnectionConfigurationToolStripMenuItem.Click += new EventHandler(LDAPConnectionConfigurationToolStripMenuItem_Click);
            this._theMainMenu.RunScriptToolStripMenuItem.Click += new EventHandler(RunScriptToolStripMenuItem_Click);
        }

        void RunScriptToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ConnectionDefinition currentConnection = TrafodionContext.Instance.CurrentConnectionDefinition;
            if (currentConnection != null && currentConnection.TheState == ConnectionDefinition.State.TestSucceeded)
            {
                RunScriptDialog runScriptDialog = new RunScriptDialog(currentConnection);
                runScriptDialog.Show();
            }
        }

        void SecurityAuditLogConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LaunchAuditLogConfig(TrafodionContext.Instance.CurrentConnectionDefinition);
        }

        private void downloadOSIMDataToolStripMenuItem_Click(object sender, EventArgs e)
        {   
            LaunchOSIMDownloadViewer(TrafodionContext.Instance.CurrentConnectionDefinition);
        }

        private void LDAPConnectionConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LaunchLDAPConnectionConfigViewer(TrafodionContext.Instance.CurrentConnectionDefinition);
        }

        void LiveAuditLogsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LaunchAuditLogViewer(TrafodionContext.Instance.CurrentConnectionDefinition, true);
        }

        void RepositoryAuditLogsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ConnectionDefinition currentConnection = TrafodionContext.Instance.CurrentConnectionDefinition;
            if (currentConnection != null && currentConnection.TheState == ConnectionDefinition.State.TestSucceeded)
            {
                LaunchAuditLogViewer(TrafodionContext.Instance.CurrentConnectionDefinition, false);
            }
        }

        void LiveEventsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LaunchEventViewer(TrafodionContext.Instance.CurrentConnectionDefinition, true);
        }

        void RepositoryEventsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ConnectionDefinition currentConnection = TrafodionContext.Instance.CurrentConnectionDefinition;
            if (currentConnection != null && currentConnection.TheState == ConnectionDefinition.State.TestSucceeded)
            {
                LaunchEventViewer(TrafodionContext.Instance.CurrentConnectionDefinition, false);
            }
        }

        void MetricMinerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (WindowsManager.Exists(TrafodionForm.TitlePrefix + global::Trafodion.Manager.Properties.Resources.MetricMiner))
            {
                WindowsManager.BringToFront(TrafodionForm.TitlePrefix + global::Trafodion.Manager.Properties.Resources.MetricMiner);
            }
            else
            {
                Size size = this.ClientSize;
                size.Width -= 50;
                size.Height -= 50;
                _theTabbedMetricMinerControl = new TabbedMetricMinerControl();
                Trafodion.Manager.MetricMiner.MetricMinerController.Instance.TheMetricMinerControl = _theTabbedMetricMinerControl;
                TrafodionForm metricMiner = WindowsManager.PutInWindow(size, _theTabbedMetricMinerControl,
                                global::Trafodion.Manager.Properties.Resources.MetricMiner, true, TrafodionContext.Instance.CurrentConnectionDefinition);
                WindowsManager.ReplaceManagedWindowTitle(metricMiner.Text, global::Trafodion.Manager.Properties.Resources.MetricMiner);
                ((ManagedWindow)metricMiner).ShowDescription = false;
                metricMiner.FormClosed += new FormClosedEventHandler(metricMiner_FormClosed);
            }
        }

        void metricMiner_FormClosed(object sender, FormClosedEventArgs e)
        {
            _theTabbedMetricMinerControl = null;
            Trafodion.Manager.MetricMiner.MetricMinerController.Instance.TheMetricMinerControl = _theTabbedMetricMinerControl;
        }

        /// <summary>
        /// Hides hidden areas and shows unhidden areas
        /// </summary>
        public void UpdateAreas(List<String> hiddenAreaNames)
        {
            this.hiddenAreaNames = hiddenAreaNames;
            foreach (AreaManager theAreaManager in AreaManager.AreaManagers)
            {
                if (hiddenAreaNames.Contains(theAreaManager.TheITrafodionArea.AreaName))
                {
                    theAreaManager.HideArea();
                }
                else
                {
                    theAreaManager.ShowArea();
                }
            }
            UpdateActivatedArea();
        }

        /// <summary>
        /// Returns the list of areas that have been loaded
        /// </summary>
        public List<string> AreaNames
        {
            get
            {
                List<string> theAreaNames = new List<string>();
                foreach (AreaManager theAreaManager in AreaManager.AreaManagers)
                {
                    theAreaNames.Add(theAreaManager.TheITrafodionArea.AreaName);
                }
                return theAreaNames;
            }
        }

        #region IOptionProvider
        /// <summary>
        /// Property that the framework reads to get the options control
        /// </summary>
        public List<IOptionControl> OptionControls
        {
            get
            {
                List<IOptionControl> list = new List<IOptionControl>();
                list.Add(new DisplayAreasPanel());
                return list;
            }
        }

        public Dictionary<String, IOptionObject> OptionObjects
        {
            get
            {
                Dictionary<string, IOptionObject> optionObjects = new Dictionary<string, IOptionObject>();
                optionObjects.Add(GeneralOptions.GeneralOptionsKey, GeneralOptions.GetOptions());
                optionObjects.Add(LogOptions.LogOptionsKey, LogOptions.GetOptions());
                optionObjects.Add(TraceOptions.TraceOptionsKey, TraceOptions.GetOptions());
                optionObjects.Add(ClientRuleOptions.ClientRuleOptionsKey, ClientRuleOptions.GetOptions());
                return optionObjects;
            }
        }
        #endregion


        void ToolsToolStripMenuItem_DropDownOpening(object sender, EventArgs e)
        {
            //if (WindowsManager.Exists(TrafodionForm.TitlePrefix + Properties.Resources.SQLWhiteboard))
            //{
            //    this._theMainMenu.SqlWhiteboardToolStripMenuItem.Enabled = false;
            //}
            //else
            //{
            //    this._theMainMenu.SqlWhiteboardToolStripMenuItem.Enabled = true;
            //}
        }

        /// <summary>
        /// Listener that is called when a new plugin is added to the Plugin folder
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void _areaWatcher_DetectedNewPlugin(object sender, FileSystemEventArgs e)
        {
            string newFileName = Path.Combine("Plugins", e.Name);
            if (!ignoredAssemblies.Contains(newFileName))
            {
                int loadStatus = (int)this.Invoke(new LoadAreaCallback(this.LoadArea), e.FullPath);
                switch (loadStatus)
                {
                    case PluginLoader.Loader.Ok:
                        MessageBox.Show(Utilities.GetForegroundControl(), Properties.Resources.DetectedNewPlugin + "\n" + Properties.Resources.StatusPluginSuccess + "\n" + e.FullPath, Properties.Resources.SuccessfulLoadTitle, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        break;

                    case PluginLoader.Loader.Incompatible:
                        MessageBox.Show(Utilities.GetForegroundControl(), Properties.Resources.DetectedNewPlugin + "\n" + Properties.Resources.StatusPluginIncompatible + "\n" + Properties.Resources.FileIgnore + "\n" + e.FullPath, Properties.Resources.FailLoadTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        break;

                    case PluginLoader.Loader.Exception:
                        string errorText = "";
                        if (_pluginExceptions.ContainsKey(e.FullPath))
                        {
                            errorText = _pluginExceptions[e.FullPath];
                        }
                        MessageBox.Show(Utilities.GetForegroundControl(), Properties.Resources.DetectedNewPlugin + "\n" + Properties.Resources.StatusPluginException + errorText + "\n" + Properties.Resources.FileIgnore + "\n" + e.FullPath, Properties.Resources.FailLoadTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        break;

                    default:
                        //MessageBox.Show(Utilities.GetForegroundControl(), Properties.Resources.DetectedNewPlugin + "\n" + Properties.Resources.StatusPluginFail + "\n" + Properties.Resources.FileIgnore + "\n" + e.FullPath, Properties.Resources.FailLoadTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        break;
                }
            }
        }

        #region ITrafodionMain

        /// <summary>
        /// Show Favorites Folder
        /// </summary>
        /// <param name="aFavoritesFolder"></param>
        public void ShowFavoritesFolder(FavoritesFolder aFavoritesFolder)
        {
            if (AreaManager.ActiveITrafodionArea != null)
            {
                AreaManager.ActiveAreaManager.ShowFavoritesFolder(aFavoritesFolder);
            }
        }
        /// <summary>
        /// The current connection definition used by the active area
        /// </summary>
        public ConnectionDefinition CurrentConnectionDefinition
        {
            get
            {
                if (AreaManager.ActiveITrafodionArea != null)
                {
                    return TrafodionContext.Instance.CurrentConnectionDefinition;
                }
                return null;
            }
            set
            {
                ConnectionDefinition connectionDefinition = value;
                if (connectionDefinition != null)
                {
                    TrafodionBannerControl.ConnectionDefinition = connectionDefinition;
                }
            }
        }

        /// <summary>
        /// The main toolbar provided by the framework
        /// </summary>
        public MainToolBar TheMainToolBar
        {
            get { return _frameworkToolBar; }
        }

        /// <summary>
        /// The main status bar
        /// </summary>
        public TrafodionStatusBar TheMainStatusBar
        {
            get { return theStatusBar; }
        }

        /// <summary>
        /// Hide Favorites Folder
        /// </summary>
        public void HideFavoritesFolder()
        {
            if (AreaManager.ActiveITrafodionArea != null)
            {
                AreaManager.ActiveAreaManager.HideFavoritesFolder();
            }
        }

        /// <summary>
        /// Given a IMenuProvider, returns the menus given by that menu provider
        /// </summary>
        public void PopulateMenubar(IMenuProvider menuProvider)
        {
            this.theMenuManager.PopulateMainMenuBar(menuProvider, theMainMenuBar, _theMainMenu);
        }

        /// <summary>
        /// Given a IToolBarProvider, returns the toolbars given by that toolbar provider
        /// </summary>
        public void PopulateToolBar(IToolBarProvider toolBarProvider)
        {
            this.theToolBarManager.PopulateMainToolBar(toolBarProvider, theMainToolBar, _frameworkToolBar);
        }

        /// <summary>
        /// Reset the toolbar to the default toolbars provided by the framework
        /// </summary>
        public void ResetToolBar()
        {
            this.theToolBarManager.ResetMainToolBar(theMainToolBar, _frameworkToolBar);
        }

        /// <summary>
        /// Launch Audit log configuration
        /// </summary>
        /// <param name="theConnectionDefinition"></param>
        public void LaunchAuditLogConfig(ConnectionDefinition theConnectionDefinition)
        {
            if (theConnectionDefinition != null && theConnectionDefinition.TheState == ConnectionDefinition.State.TestSucceeded)
            {
                AuditLoggingConfiguration auditLoggingConfiguration = new AuditLoggingConfiguration(theConnectionDefinition);
                auditLoggingConfiguration.ShowDialog();
            }

        }

        /// <summary>
        /// Launch Audit log viewer for SQ
        /// </summary>
        /// <param name="theConnectionDefinition"></param>
        public void LaunchAuditLogViewer(ConnectionDefinition theConnectionDefinition, bool live)
        {
            Size windowSize = new Size(this.Size.Width - 50, this.Size.Height - 50);
            if (!live)
            {
                if (theConnectionDefinition != null && theConnectionDefinition.TheState == ConnectionDefinition.State.TestSucceeded)
                {
                    //Show AuditLog window
                    AuditLogUserControl theAuditLogs = new AuditLogUserControl(theConnectionDefinition);
                    Utilities.LaunchManagedWindow(global::Trafodion.Manager.Properties.Resources.SecurityAuditLogsViewerCaption, theAuditLogs, theConnectionDefinition, windowSize, true);
                }
            }
        }


        /// <summary>
        /// Launch Text event viewer for SQ
        /// </summary>
        /// <param name="theConnectionDefinition"></param>
        public void LaunchEventViewer(ConnectionDefinition theConnectionDefinition, bool live)
        {
            bool newWindowCreate = false;
            Size windowSize = new Size(this.Size.Width - 50, this.Size.Height - 50);

            if (live)
            {
                string systemIdentifier = (theConnectionDefinition != null) ? theConnectionDefinition.Name + " : " : "";
                string windowTitle = TrafodionForm.TitlePrefix + systemIdentifier + "Live Event Viewer";
                if (WindowsManager.Exists(windowTitle))
                {
                    WindowsManager.Restore(windowTitle);
                    WindowsManager.BringToFront(windowTitle);
                }
                else
                {                    
                    //Check live feed installed
                    /*if (Utilities.IsInstalledLiveFeedDriver())
                    {
                        LiveFeedEventUserControl theEvents = new LiveFeedEventUserControl(theConnectionDefinition);
                        if (theEvents.Initialized)
                        {
                            TrafodionForm form = WindowsManager.PutInWindow(windowSize, theEvents, "Live Event Viewer", false, false, theConnectionDefinition);
                            form.StartPosition = FormStartPosition.CenterParent;
                        }
                        else
                        {
                            theEvents.Dispose();
                        }
                    }
                    else*/
                    {
                        MessageBox.Show(Utilities.GetForegroundControl(), string.Format(Trafodion.Manager.Properties.Resources.ErrorMustInstalledLiveFeedDriver, Utilities.Is64bitOS() ? "64 bit" : "32 bit"),
                            Properties.Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
            }
            if (!live)
            {
                if (theConnectionDefinition != null && theConnectionDefinition.TheState == ConnectionDefinition.State.TestSucceeded)
                {
                    TextEventUserControl theTextEvents = new TextEventUserControl(theConnectionDefinition);
                    newWindowCreate = Utilities.LaunchManagedWindow(Properties.Resources.EventViewer, theTextEvents, theConnectionDefinition, windowSize, true);
                }
            }
        }

        /// <summary>
        /// Launch SQL whiteboard if not already exist. 
        /// </summary>
        public void LaunchSQLWhiteboard()
        {
            //LaunchSQLWhiteboard(null, null);
            _sqlWhiteboardHandler.LaunchSQLWhiteboard(null, null, this.ClientSize);
        }

        /// <summary>
        /// Launch the SQL Whiteboard and loaded it with a list of statements.
        /// </summary>
        /// <param name="aListOfStatements"></param>
        /// <param name="from"></param>
        public void LaunchSQLWhiteboard(ArrayList aListOfStatements, string from)
        {
            _sqlWhiteboardHandler.LaunchSQLWhiteboard(aListOfStatements, from, this.ClientSize);
        }

        void LaunchOSIMDownloadViewer(ConnectionDefinition theConnectionDefinition)
        {
            string systemIdentifier = (theConnectionDefinition != null) ? theConnectionDefinition.Name + " : " : "";
            string windowTitle = TrafodionForm.TitlePrefix + systemIdentifier + Trafodion.Manager.Properties.Resources.DownloadOSIMDataFileTitle;
            if (WindowsManager.Exists(windowTitle))
            {
                WindowsManager.Restore(windowTitle);
                WindowsManager.BringToFront(windowTitle);
            }
            else
            {
                if (theConnectionDefinition != null && theConnectionDefinition.TheState == ConnectionDefinition.State.TestSucceeded)
                {
                    Size windowSize = new Size(900, 560);
                    //Show osim download window
                    OSIMDataDownloadUserControl theOSIMDownload = new OSIMDataDownloadUserControl(theConnectionDefinition);
                    Utilities.LaunchManagedWindow(Trafodion.Manager.Properties.Resources.DownloadOSIMDataFileTitle, theOSIMDownload, theConnectionDefinition, windowSize, true);
                }
            }
        }

        void LaunchLDAPConnectionConfigViewer(ConnectionDefinition theConnectionDefinition)
        {
            string systemIdentifier = (theConnectionDefinition != null) ? theConnectionDefinition.Name + " : " : "";
            string windowTitle = TrafodionForm.TitlePrefix + systemIdentifier + Trafodion.Manager.Properties.Resources.ConfigureLDAP;
            if (WindowsManager.Exists(windowTitle))
            {
                WindowsManager.Restore(windowTitle);
                WindowsManager.BringToFront(windowTitle);
            }
            else
            {
                if (theConnectionDefinition != null && theConnectionDefinition.TheState == ConnectionDefinition.State.TestSucceeded)
                {
                    //Show ldap configure window
                    LDAPConnectionConfigDialog theLDAPConfig = new LDAPConnectionConfigDialog(theConnectionDefinition);
                    theLDAPConfig.ShowDialog();
                }
            }
        }
        #endregion

        /// <summary>
        /// Tests to see if a dll is valid and can be loaded and instantiated with no exceptions
        /// </summary>
        /// <param name="anAreaPath">Full Path of the .dll plugin</param>
        /// <returns>the status of loading the plugin</returns>
        private int TestArea(string anAreaPath)
        {
            AppDomain tempDomain = AppDomain.CreateDomain("TempTestDomain");

            PluginLoader.Loader thePluginLoader = (PluginLoader.Loader)tempDomain.CreateInstanceFromAndUnwrap("PluginLoader.dll", "PluginLoader.Loader");
            try
            {
                int loadStatus = thePluginLoader.LoadInAppDomain(anAreaPath, _frameworkVersion);                
                return loadStatus;
            }
            catch (Exception e)
            {
                if (_pluginExceptions.ContainsKey(anAreaPath))
                {
                    _pluginExceptions.Remove(anAreaPath);
                }
                StringBuilder messageBuilder = new StringBuilder(e.Message);
                messageBuilder.AppendLine(e.StackTrace);
                if (e is System.Reflection.ReflectionTypeLoadException)
                {
                    ReflectionTypeLoadException loadException = (ReflectionTypeLoadException)e;
                    if (loadException.LoaderExceptions.Length > 0)
                    {
                        messageBuilder = new StringBuilder();
                        foreach (Exception le in loadException.LoaderExceptions)
                        {
                            messageBuilder.AppendLine(le.Message);
                            messageBuilder.AppendLine(le.StackTrace);
                        }
                    }
                }
                _pluginExceptions.Add(anAreaPath, messageBuilder.ToString());
                return PluginLoader.Loader.Exception;
            }
            finally
            {
                AppDomain.Unload(tempDomain);
            }
        }

        /// <summary>
        /// This method allows you to load areas given the path of the area
        /// </summary>
        /// <param name="anAreaPath">the path of the area</param>
        private int LoadArea(string anAreaPath)
        {
           //int loadStatus = TestArea(anAreaPath);
           // if (loadStatus != PluginLoader.Loader.Ok)
           // {
           //     return loadStatus;
           // }

            // If it loaded without problems, load it into the current appDomain
            try
            {
                Assembly theAreaAssembly = Assembly.LoadFrom(anAreaPath);


                Type[] theTypes = theAreaAssembly.GetTypes();

                ITrafodionArea theITrafodionArea = null;

                foreach (Type currType in theTypes)
                {
                    // Try to find the type that implements ITrafodionArea
                    if (currType.GetInterface("ITrafodionArea") != null)
                    {
                        theITrafodionArea = Activator.CreateInstance(currType) as ITrafodionArea;
                        break;
                    }
                }

                // And create an area manager for it
                new AreaManager(theITrafodionArea);

                Trafodion.Manager.TrafodionAboutBox._loadedAssemblies.Add(theAreaAssembly);
                
                return PluginLoader.Loader.Ok;

            }
            catch (Exception e)
            {
                if (_pluginExceptions.ContainsKey(anAreaPath))
                {
                    _pluginExceptions.Remove(anAreaPath);
                }
                StringBuilder messageBuilder = new StringBuilder(e.Message);
                messageBuilder.AppendLine(e.StackTrace);
                if (e is System.Reflection.ReflectionTypeLoadException)
                {
                    ReflectionTypeLoadException loadException = (ReflectionTypeLoadException)e;
                    if (loadException.LoaderExceptions.Length > 0)
                    {
                        messageBuilder = new StringBuilder();
                        foreach (Exception le in loadException.LoaderExceptions)
                        {
                            messageBuilder.AppendLine(le.Message);
                            messageBuilder.AppendLine(le.StackTrace);
                        }
                    }
                }
                _pluginExceptions.Add(anAreaPath, messageBuilder.ToString());
                return PluginLoader.Loader.Exception;
            }
        }

        // Helper function that's called to ensure at least one area is activated after an update
        private void UpdateActivatedArea()
        {
            int initialButtonsPeneHeight = theAreaButtonsPane.Height;

            int areaButtonHeights = 0;
            if (AreaManager.AreaManagers.Count > 0)
            {
                foreach (AreaManager theAreaManager in AreaManager.AreaManagers)
                {
                    if (!theAreaManager.IsHidden)
                    {
                        if (AreaManager.ActiveAreaManager == null)
                        {
                            theAreaManager.Activate();
                        }
                        areaButtonHeights += theAreaManager.AreaButtonHeight;
                    }
                }
            }
            theAreaButtonsPane.Height = areaButtonHeights;
        }

#if DEBUG

        /// <summary>
        /// Called whenever a connection is opened
        /// </summary>
        /// <param name="aConnectionDefinition">The connection defintion</param>
        void ConnectionOpened(ConnectionDefinition aConnectionDefinition)
        {
            //System.Console.WriteLine(aConnectionDefinition.Name + " opened.");
        }

        /// <summary>
        /// Called whenever a connection is closed
        /// </summary>
        /// <param name="aConnectionDefinition">The connection defintion</param>
        void ConnectionClosed(ConnectionDefinition aConnectionDefinition)
        {
            //System.Console.WriteLine(aConnectionDefinition.Name + " closed.");
        }

        /// <summary>
        /// Write all of the environment variables to the console
        /// </summary>
        private static void WriteEnvironmentToConsole()
        {
            Console.WriteLine();
            Console.WriteLine("GetEnvironmentVariables: ");
            IDictionary environmentVariables = Environment.GetEnvironmentVariables();
            foreach (DictionaryEntry de in environmentVariables)
            {
                Console.WriteLine("  {0} = {1}", de.Key, de.Value);
            }
            Console.WriteLine();
        }
#endif

        /// <summary>
        /// Handles loading and saving our persisted state.
        /// </summary>
        /// <param name="aDictionary">The persistence dictionary</param>
        /// <param name="aPersistenceOperation">Whether to load or save our state</param>
        private void TrafodionMainPersistence(Dictionary<string, object> aDictionary, Persistence.PersistenceOperation aPersistenceOperation)
        {
            switch (aPersistenceOperation)
            {

                // Load persisted state (the currently active area's name)
                case Persistence.PersistenceOperation.PreLoad:
                    {
                        //Nothing to handle for persistence preload event
                        break;
                    }
                case Persistence.PersistenceOperation.Load:
                    {
                        if (aDictionary.ContainsKey(PersistenceKey))
                        {
                            object persistedObj = Persistence.Get(PersistenceKey);
                            string theActiveAreaName = null;
                            ;

                            //Old way of persisting
                            if (persistedObj is string)
                            {
                                // Get the name of the most recently activated area
                                theActiveAreaName = aDictionary[PersistenceKey] as string;
                            }
                            else if (persistedObj is Hashtable) //New way of persisting
                            {
                                Hashtable TrafodionProperties = Persistence.Get(PersistenceKey) as Hashtable;
                                if (TrafodionProperties != null)
                                {
                                    theActiveAreaName = TrafodionProperties[ActiveArea] as string;

                                    // Maximize the window according to state of last time
                                    if (TrafodionProperties.ContainsKey(TrafodionMainWindowState))
                                    {
                                        FormWindowState windowState = (FormWindowState)TrafodionProperties[TrafodionMainWindowState];
                                        if (windowState == FormWindowState.Maximized)
                                        {
                                            this.WindowState = FormWindowState.Maximized;
                                            this.Height = 0; // Invalidate the height of the window to let it auto resize, so that when user normalized the size from maximized, the size of the window will looks comfortable
                                        }
                                    }

                                    // Only when the Window is note maximize, we shoule restore the size to last one
                                    if (this.WindowState != FormWindowState.Maximized)
                                    {
                                        if (TrafodionProperties.ContainsKey(TrafodionMainSize))
                                        {
                                            Size persistedSize = (Size)TrafodionProperties[TrafodionMainSize];

                                            this.ClientSize = new System.Drawing.Size(persistedSize.Width, persistedSize.Height + theStatusBar.Height);
                                            this.theMainPanel.Size = new System.Drawing.Size(persistedSize.Width, persistedSize.Height);

                                            // After resizing Window, previous center setting is not effective any more. So redo CenterToScreen().
                                            this.CenterToScreen();
                                        }
                                    }
                                }
                            }


                            // Re-activate that area
                            if (theActiveAreaName != null)
                            {
                                AreaManager.ActivateTrafodionArea(theActiveAreaName);
                            }


                        }

                        // Get the list of hidden areas
                        hiddenAreaNames = OptionStore.GetOptionValues(global::Trafodion.Manager.Properties.Resources.ProductOptions,
                            global::Trafodion.Manager.Properties.Resources.ShowHideAreaOptions) as List<string>;
                        hiddenAreaNames = (hiddenAreaNames == null) ? new List<string>() : hiddenAreaNames;

                        // Update the areas that should be hidden
                        UpdateAreas(hiddenAreaNames);

                        //// Get the list of hidden areas
                        //if (aDictionary.ContainsKey(HiddenAreasPersistenceKey))
                        //{
                        //    hiddenAreaNames = aDictionary[HiddenAreasPersistenceKey] as List<string>;
                        //}

                        break;
                    }
                case Persistence.PersistenceOperation.Save:
                    {

                        // Save persisted state (the currently active area's name)
                        if (AreaManager.ActiveTrafodionAreaName != null)
                        {
                            Hashtable TrafodionProperties = new Hashtable();
                            TrafodionProperties.Add(ActiveArea, AreaManager.ActiveTrafodionAreaName);
                            TrafodionProperties.Add(TrafodionMainSize, this.theMainPanel.Size);
                            TrafodionProperties.Add(TrafodionMainWindowState, this.WindowState);
                            aDictionary.Add(PersistenceKey, TrafodionProperties);
                        }
                        //aDictionary.Add(HiddenAreasPersistenceKey, hiddenAreaNames);

                        break;
                    }
                default:
                    {
                        throw new ApplicationException("Unknown persistence op");
                    }
            }
        }

        /// <summary>
        /// Generated by the designer.  Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (components != null)
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.theMainPanel = new Trafodion.Manager.Framework.Controls.TrafodionPanel();
            this.theLeftRightSplitContainer = new Trafodion.Manager.Framework.Controls.TrafodionSplitContainer();
            this.theLeftPane = new Trafodion.Manager.Framework.Controls.TrafodionPanel();
            this.theActiveNavigatorPane = new Trafodion.Manager.Framework.Controls.TrafodionPanel();
            this.theActiveAreaLabelPane = new Trafodion.Manager.Framework.Controls.TrafodionToolStrip();
            this.theAreaButtonsPane = new Trafodion.Manager.Framework.Controls.TrafodionPanel();
            this.theActiveRightPanePane = new Trafodion.Manager.Framework.Controls.TrafodionPanel();
            this.TrafodionPanel = new Trafodion.Manager.Framework.Controls.TrafodionPanel();
            this.TrafodionBannerControl = new Trafodion.Manager.Framework.Controls.TrafodionBannerControl();
            this.theMainToolBar = new Trafodion.Manager.Framework.Controls.TrafodionToolStrip();
            this.theMainMenuBar = new Trafodion.Manager.Framework.Controls.TrafodionMenuStrip();
            this.theStatusBar = new Trafodion.Manager.Framework.Controls.TrafodionStatusBar();
            this.theMainPanel.SuspendLayout();
            this.theLeftRightSplitContainer.Panel1.SuspendLayout();
            this.theLeftRightSplitContainer.Panel2.SuspendLayout();
            this.theLeftRightSplitContainer.SuspendLayout();
            this.theLeftPane.SuspendLayout();
            this.TrafodionPanel.SuspendLayout();
            this.SuspendLayout();
            // 
            // theMainPanel
            // 
            this.theMainPanel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.theMainPanel.Controls.Add(this.theLeftRightSplitContainer);
            this.theMainPanel.Controls.Add(this.TrafodionPanel);
            this.theMainPanel.Controls.Add(this.theMainToolBar);
            this.theMainPanel.Controls.Add(this.theMainMenuBar);
            this.theMainPanel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.theMainPanel.Location = new System.Drawing.Point(0, 0);
            this.theMainPanel.Name = "theMainPanel";
            this.theMainPanel.Size = new System.Drawing.Size(1010, 713);
            this.theMainPanel.TabIndex = 0;
            // 
            // theLeftRightSplitContainer
            // 
            this.theLeftRightSplitContainer.Dock = System.Windows.Forms.DockStyle.Fill;
            this.theLeftRightSplitContainer.Location = new System.Drawing.Point(0, 100);
            this.theLeftRightSplitContainer.Name = "theLeftRightSplitContainer";
            // 
            // theLeftRightSplitContainer.Panel1
            // 
            this.theLeftRightSplitContainer.Panel1.Controls.Add(this.theLeftPane);
            // 
            // theLeftRightSplitContainer.Panel2
            // 
            this.theLeftRightSplitContainer.Panel2.Controls.Add(this.theActiveRightPanePane);
            this.theLeftRightSplitContainer.Size = new System.Drawing.Size(1010, 613);
            this.theLeftRightSplitContainer.SplitterDistance = 222;
            this.theLeftRightSplitContainer.SplitterWidth = 9;
            this.theLeftRightSplitContainer.TabIndex = 0;
            // 
            // theLeftPane
            // 
            this.theLeftPane.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.theLeftPane.Controls.Add(this.theActiveNavigatorPane);
            this.theLeftPane.Controls.Add(this.theActiveAreaLabelPane);
            this.theLeftPane.Controls.Add(this.theAreaButtonsPane);
            this.theLeftPane.Dock = System.Windows.Forms.DockStyle.Fill;
            this.theLeftPane.Location = new System.Drawing.Point(0, 0);
            this.theLeftPane.Name = "theLeftPane";
            this.theLeftPane.Size = new System.Drawing.Size(222, 613);
            this.theLeftPane.TabIndex = 0;
            // 
            // theActiveNavigatorPane
            // 
            this.theActiveNavigatorPane.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.theActiveNavigatorPane.Dock = System.Windows.Forms.DockStyle.Fill;
            this.theActiveNavigatorPane.Location = new System.Drawing.Point(0, 25);
            this.theActiveNavigatorPane.Name = "theActiveNavigatorPane";
            this.theActiveNavigatorPane.Size = new System.Drawing.Size(222, 588);
            this.theActiveNavigatorPane.TabIndex = 1;
            // 
            // theActiveAreaLabelPane
            // 
            this.theActiveAreaLabelPane.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.theActiveAreaLabelPane.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
            this.theActiveAreaLabelPane.Location = new System.Drawing.Point(0, 0);
            this.theActiveAreaLabelPane.Name = "theActiveAreaLabelPane";
            this.theActiveAreaLabelPane.Size = new System.Drawing.Size(222, 25);
            this.theActiveAreaLabelPane.Stretch = true;
            this.theActiveAreaLabelPane.TabIndex = 0;
            // 
            // theAreaButtonsPane
            // 
            this.theAreaButtonsPane.AutoSize = true;
            this.theAreaButtonsPane.BackColor = System.Drawing.Color.WhiteSmoke;
            this.theAreaButtonsPane.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.theAreaButtonsPane.ForeColor = System.Drawing.SystemColors.ControlText;
            this.theAreaButtonsPane.Location = new System.Drawing.Point(0, 613);
            this.theAreaButtonsPane.Name = "theAreaButtonsPane";
            this.theAreaButtonsPane.Size = new System.Drawing.Size(222, 0);
            this.theAreaButtonsPane.TabIndex = 2;
            // 
            // theActiveRightPanePane
            // 
            this.theActiveRightPanePane.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.theActiveRightPanePane.Dock = System.Windows.Forms.DockStyle.Fill;
            this.theActiveRightPanePane.Location = new System.Drawing.Point(0, 0);
            this.theActiveRightPanePane.Name = "theActiveRightPanePane";
            this.theActiveRightPanePane.Padding = new System.Windows.Forms.Padding(3);
            this.theActiveRightPanePane.Size = new System.Drawing.Size(779, 613);
            this.theActiveRightPanePane.TabIndex = 0;
            // 
            // TrafodionPanel
            // 
            this.TrafodionPanel.BackColor = System.Drawing.Color.White;
            this.TrafodionPanel.Controls.Add(this.TrafodionBannerControl);
            this.TrafodionPanel.Dock = System.Windows.Forms.DockStyle.Top;
            this.TrafodionPanel.Location = new System.Drawing.Point(0, 49);
            this.TrafodionPanel.Name = "TrafodionPanel";
            this.TrafodionPanel.Size = new System.Drawing.Size(1010, 51);
            this.TrafodionPanel.TabIndex = 3;
            // 
            // TrafodionBannerControl
            // 
            this.TrafodionBannerControl.ConnectionDefinition = null;
            this.TrafodionBannerControl.Dock = System.Windows.Forms.DockStyle.Fill;
            this.TrafodionBannerControl.Location = new System.Drawing.Point(0, 0);
            this.TrafodionBannerControl.Name = "TrafodionBannerControl";
            this.TrafodionBannerControl.ShowDescription = true;
            this.TrafodionBannerControl.Size = new System.Drawing.Size(1010, 51);
            this.TrafodionBannerControl.TabIndex = 30;
            // 
            // theMainToolBar
            // 
            this.theMainToolBar.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
            this.theMainToolBar.Location = new System.Drawing.Point(0, 24);
            this.theMainToolBar.Name = "theMainToolBar";
            this.theMainToolBar.Size = new System.Drawing.Size(1010, 25);
            this.theMainToolBar.TabIndex = 1;
            this.theMainToolBar.Text = "theMainToolBarStrip";
            // 
            // theMainMenuBar
            // 
            this.theMainMenuBar.Font = new System.Drawing.Font("Tahoma", 8.25F);
            this.theMainMenuBar.Location = new System.Drawing.Point(0, 0);
            this.theMainMenuBar.Name = "theMainMenuBar";
            this.theMainMenuBar.Size = new System.Drawing.Size(1010, 24);
            this.theMainMenuBar.TabIndex = 0;
            this.theMainMenuBar.Text = "menuStrip1";
            // 
            // theStatusBar
            // 
            this.theStatusBar.Location = new System.Drawing.Point(0, 713);
            this.theStatusBar.Name = "theStatusBar";
            this.theStatusBar.Size = new System.Drawing.Size(1010, 22);
            this.theStatusBar.TabIndex = 1;
            // 
            // TrafodionMain
            // 
            this.BackColor = System.Drawing.Color.WhiteSmoke;
            this.ClientSize = new System.Drawing.Size(1010, 735);
            this.Controls.Add(this.theMainPanel);
            this.Controls.Add(this.theStatusBar);
            this.MainMenuStrip = this.theMainMenuBar;
            this.Name = "TrafodionMain";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Main Window";
            this.Load += new System.EventHandler(this.TrafodionMain_Load);
            this.Shown += new System.EventHandler(this.TrafodionMain_Shown);
            this.Activated += new System.EventHandler(this.TrafodionMainActivated);
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.TrafodionMainFormClosing);
            this.theMainPanel.ResumeLayout(false);
            this.theMainPanel.PerformLayout();
            this.theLeftRightSplitContainer.Panel1.ResumeLayout(false);
            this.theLeftRightSplitContainer.Panel2.ResumeLayout(false);
            this.theLeftRightSplitContainer.ResumeLayout(false);
            this.theLeftPane.ResumeLayout(false);
            this.theLeftPane.PerformLayout();
            this.TrafodionPanel.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion


        /// <summary>
        /// An area's label.  Shown in the upper left above the area's navigator when the area is active.
        /// </summary>
        private class AreaLabel : ToolStripLabel
        {

            internal AreaLabel(AreaManager anArea)
            {
                Area = anArea;
                Text = anArea.TheITrafodionArea.AreaName;
                Dock = DockStyle.Top;
                ForeColor = SystemColors.ActiveCaptionText;
                TextAlign = ContentAlignment.MiddleLeft;
                Font = new Font("Tahoma", 9.25F, FontStyle.Bold);
            }

            public AreaManager Area
            {
                get { return theArea; }
                set { theArea = value; }
            }

            private AreaManager theArea;

        }

        /// <summary>
        /// An area's button.  We show it in the lower left among the buttons for all of the 
        /// areas.
        /// </summary>
        private class AreaButton : ToolStripButton
        {
            public AreaButton(AreaManager anArea)
            {
                Area = anArea;
                Text = anArea.TheITrafodionArea.AreaName;
                this.AutoSize = false;
                this.ImageScaling = ToolStripItemImageScaling.None;
                this.Padding = new Padding(0, 0, 0, 0);
                this.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText;
                ImageAlign = ContentAlignment.MiddleLeft;
                this.Margin = new Padding(0, 0, 0, 0);
                this.TextImageRelation = TextImageRelation.ImageBeforeText;
                this.TextAlign = ContentAlignment.MiddleLeft;
                Font = new Font("Tahoma", 8.25F, FontStyle.Bold);
                Click += new EventHandler(AreaButtonClick);
            }

            public AreaManager Area
            {
                get { return theArea; }
                set { theArea = value; }
            }

            public void AreaButtonClick(object sender, EventArgs e)
            {
                Area.Activate();
            }

            private AreaManager theArea;

        }
       
        /// <summary>
        /// Used by the main program to manage the areas that have been instantiated.  One instance per area plus static
        /// methods to apply to all areas.
        /// </summary>
        private class AreaManager
        {

            /// <summary>
            /// The base for a range of tab key indices for the area buttons.
            /// </summary>
            private static int theNextAreaTabKeyIndex = 100;

            private bool showingFavoritesFolder = false;
            private bool isHidden = false;

            /// <summary>
            /// Get and Set whether an area is hidden
            /// </summary>
            public bool IsHidden
            {
                get { return isHidden; }
                set { isHidden = value; }
            }

            /// <summary>
            /// Creates an area manager for an area
            /// </summary>
            /// <param name="anITrafodionArea">The area to be managed</param>
            internal AreaManager(ITrafodionArea anITrafodionArea)
            {
                theITrafodionArea = anITrafodionArea;                               

                theAreaLabel = new AreaLabel(this);
                theAreaButton = new AreaButton(this);
                theAreaButton.Image = anITrafodionArea.Image;

                // Add us to the other area managers
                AreaManagers.Add(this);


                // Add our button
                theAreaButtonStrip = new TrafodionToolStrip();
                theAreaButtonStrip.Renderer = new AreaButtonRenderer();
                //theAreaButtonStrip.Renderer = new StackRenderer();
                theAreaButtonStrip.GripStyle = ToolStripGripStyle.Hidden;
                theAreaButtonStrip.LayoutStyle = ToolStripLayoutStyle.Table;
                theAreaButtonStrip.AutoSize = false;
                theAreaButtonStrip.Height = 35;
                theAreaButtonStrip.Visible = true;
                TheAreaButtonsPane.SuspendLayout();
                theAreaButtonStrip.SuspendLayout();
                TableLayoutSettings layoutSettings = theAreaButtonStrip.LayoutSettings as TableLayoutSettings;
                layoutSettings.ColumnCount = 1;
                theAreaButton.Dock = DockStyle.Fill;
                theAreaButtonStrip.Items.Add(theAreaButton);
                TheAreaButtonsPane.Controls.Add(theAreaButtonStrip);
                theAreaButtonStrip.ResumeLayout();
                TheAreaButtonsPane.ResumeLayout();

            }

            /// <summary>
            /// Read only property that tells if this area manager's area is the active one
            /// </summary>
            internal bool IsActive
            {
                get
                {
                    return (theActiveAreaManager == this);
                }
            }

            /// <summary>
            /// Read only property that tells if any area manager is active
            /// </summary>
            static internal bool NoActive
            {
                get
                {
                    return (theActiveAreaManager == null);
                }
            }

            /// <summary>
            /// Find an area by name and activate it
            /// </summary>
            /// <param name="aTrafodionAreaName">The area name</param>
            static internal void ActivateTrafodionArea(string aTrafodionAreaName)
            {
                foreach (AreaManager theAreaManager in AreaManagers)
                {
                    if (theAreaManager.TheITrafodionArea.AreaName.Equals(aTrafodionAreaName))
                    {
                        theAreaManager.Activate();
                        break;
                    }
                }
            }

            /// <summary>
            /// Read only property that returns the active area manager.  Will be null in the
            /// case that there is no active area manager.
            /// </summary>
            static internal AreaManager ActiveAreaManager
            {
                get
                {
                    return theActiveAreaManager;
                }
            }

            /// <summary>
            /// Read only property that returns the active area itself.  Will be null in the
            /// case that there is no active area manager.
            /// </summary>
            static internal ITrafodionArea ActiveITrafodionArea
            {
                get
                {
                    if (NoActive)
                    {
                        return null;
                    }
                    return ActiveAreaManager.TheITrafodionArea;
                }
            }
            
            /// <summary>
            /// Read only property that returns the active area's name.  Will be null in the
            /// case that there is no active area manager.
            /// </summary>
            static internal string ActiveTrafodionAreaName
            {
                get
                {
                    if (NoActive)
                    {
                        return null;
                    }
                    return ActiveAreaManager.TheITrafodionArea.AreaName;
                }
            }

            /// <summary>
            /// Causes our area to become active.  Deactivates the current area if any.  Is a no-op
            /// if our area is already active.
            /// </summary>
            internal void Activate()
            {
                if (IsActive)
                {
                    return;
                }

                if (!NoActive)
                {
                    ActiveAreaManager.Deactivate();
                }

                //If an area becomes active, display the menus for that area if the area implements the
                //IMenuProvider interface
                IMenuProvider menuProvider = theITrafodionArea as IMenuProvider;
                if (TrafodionContext.Instance.TheTrafodionMain != null)
                {
                    TrafodionContext.Instance.TheTrafodionMain.PopulateMenubar(menuProvider);
                }

                //If an area becomes active, display the toolbars for that area if the area implements the
                //IToolBarProvider interface
                IToolBarProvider toolBarProvider = theITrafodionArea as IToolBarProvider;
                if (TrafodionContext.Instance.TheTrafodionMain != null)
                {
                    TrafodionContext.Instance.TheTrafodionMain.PopulateToolBar(toolBarProvider);
                }

                // Show our label
                TheActiveAreaLabelPane.Items.Clear();
                TheAreaLabel.Image = theITrafodionArea.Image;
                TheActiveAreaLabelPane.Items.Add(TheAreaLabel);
                TheActiveAreaLabelPane.BackColor = TrafodionColorTable.ToolStripGradientEndColor;
                //TheActiveAreaLabelPane.BackColor = TrafodionColorTable.GripDarkColor;
                TheAreaLabel.ForeColor = TrafodionColorTable.ControlText;
                //TheAreaLabel.ForeColor = TrafodionColorTable.ActiveCaptionText;

                // Show our navigator
                Control thaNavigator = TheITrafodionArea.Navigator;
                thaNavigator.Dock = DockStyle.Fill;
                TheActiveNavigatorPane.Controls.Clear();
                TheActiveNavigatorPane.Controls.Add(thaNavigator);
                TheActiveNavigatorPane.BringToFront();

                TheAreaButton.Checked = true;

                ShowRightPane();

                //We are active
                theActiveAreaManager = this;
            }

            internal void ShowFavoritesFolder(FavoritesFolder aFavoritesFolder)
            {
                showingFavoritesFolder = true;
                TheActiveRightPanePane.Controls.Clear();
                FavoritesFolderPanel theFavoritesFolderPanel = new FavoritesFolderPanel(aFavoritesFolder);
                theFavoritesFolderPanel.Dock = DockStyle.Fill;
                TheActiveRightPanePane.Controls.Add(theFavoritesFolderPanel);
            }

            internal void HideFavoritesFolder()
            {
                if (showingFavoritesFolder)
                {
                    showingFavoritesFolder = false;
                    ShowRightPane();
                }
            }

            private void ShowRightPane()
            {
                // Show our right pane
                TheActiveRightPanePane.Controls.Clear();
                TheITrafodionArea.RightPane.Dock = DockStyle.Fill;
                TheActiveRightPanePane.Controls.Add(TheITrafodionArea.RightPane);
                //Notify the area that it's now the active area
                if (!IsActive)
                {
                    TheITrafodionArea.OnActivate();
                }
            }

            /// <summary>
            /// Hides an Area
            /// </summary>
            public void HideArea()
            {
                this.Deactivate();
                theAreaButtonStrip.Visible = false;
                this.isHidden = true;
            }

            /// <summary>
            /// Shows an Area
            /// </summary>
            public void ShowArea()
            {
                theAreaButtonStrip.Visible = true;
                this.isHidden = false;
            }

            /// <summary>
            /// Deactivate our area if it is active
            /// </summary>
            internal void Deactivate()
            {
                if (IsActive)
                {

                    // Remove our area's label
                    TheActiveAreaLabelPane.Items.Remove(TheAreaLabel);

                    // No area is active
                    theActiveAreaManager = null;

                    // Remove our area's navigator
                    TheActiveNavigatorPane.Controls.Clear();

                    // Remove our area's right pane
                    TheActiveRightPanePane.Controls.Clear();

                    // Enable our area's button
                    TheAreaButton.Enabled = true;
                    TheAreaButton.Checked = false;
                }
            }

            /// <summary>
            /// Read only property to get our area label control
            /// </summary>
            internal ToolStripLabel TheAreaLabel
            {
                get { return theAreaLabel; }
            }

            /// <summary>
            /// Read only property to get our area button control
            /// </summary>
            internal ToolStripButton TheAreaButton
            {
                get { return theAreaButton; }
            }

            /// <summary>
            /// Read only propery to get the list of all area managers
            /// </summary>
            static internal List<AreaManager> AreaManagers
            {
                get { return theAreaManagers; }
            }

            /// <summary>
            /// Property that gets/sets the pane to use to hold the active area's label
            /// </summary>
            internal static TrafodionToolStrip TheActiveAreaLabelPane
            {
                get { return theActiveAreaLabelPane; }
                set
                {
                    theActiveAreaLabelPane = value;
                    theActiveAreaLabelPane.AutoSize = true;
                }
            }

            /// <summary>
            /// Property that gets/sets the pane to use to hold the active area's right pane
            /// </summary>
            internal static TrafodionPanel TheActiveNavigatorPane
            {
                get { return theActiveNavigatorPane; }
                set { theActiveNavigatorPane = value; }
            }

            /// <summary>
            /// Property that gets/sets the pane to use to hold the area buttons
            /// </summary>
            internal static TrafodionPanel TheAreaButtonsPane
            {
                get { return theAreaButtonsPane; }
                set
                {
                    theAreaButtonsPane = value;
                }
            }

            /// <summary>
            /// Property that gets/sets the pane to use to hold the area's right pane
            /// </summary>
            internal static Control TheActiveRightPanePane
            {
                get { return theActiveRightPane; }
                set { theActiveRightPane = value; }
            }
            internal static ImageList TheImageList
            {
                get { return theImageList; }
                set { theImageList = value; }
            }
            internal int AreaButtonHeight
            {
                get { return theAreaButtonStrip.Height; }
            }
            /// <summary>
            /// Property that gets/sets the area that we are managing
            /// </summary>
            internal ITrafodionArea TheITrafodionArea
            {
                get { return theITrafodionArea; }
                set { theITrafodionArea = value; }
            }

            #region Member variables

            private ITrafodionArea theITrafodionArea;
            private AreaButton theAreaButton;
            private ToolStripLabel theAreaLabel;
            private TrafodionToolStrip theAreaButtonStrip;

            #endregion

            #region Class variables

            static private AreaManager theActiveAreaManager = null;
            static private List<AreaManager> theAreaManagers = new List<AreaManager>();

            static private TrafodionToolStrip theActiveAreaLabelPane = null;
            static private TrafodionPanel theActiveNavigatorPane = null;
            static private TrafodionPanel theAreaButtonsPane = null;
            static private Control theActiveRightPane = null;
            static private ToolStripLabel theActiveConnectionLabel = null;
            static private ImageList theImageList = null;

            #endregion

        }


        /// <summary>
        /// Called when the user clicks File | Exit
        /// </summary>
        /// <param name="sender">The event generator</param>
        /// <param name="e">The event</param>
        private void exitToolStripMenuItemClick(object sender, EventArgs e)
        {
            CancelEventArgs theCancelEventArgs = new CancelEventArgs();
            Application.Exit(theCancelEventArgs);
        }

        /// <summary>
        /// Called when the user clicks Tools | Systems
        /// </summary>
        /// <param name="sender">The event generator</param>
        /// <param name="e">The event</param>
        private void theSystemsToolStripMenuItemClick(object sender, EventArgs e)
        {

            // Run the systems tool
            (new ConnectionsTool()).ShowDialog();

        }

        /// <summary>
        /// Called when the main window is about to close
        /// </summary>
        /// <param name="sender">The event generator</param>
        /// <param name="e">The event</param>
        private void TrafodionMainFormClosing(object sender, FormClosingEventArgs e)
        {
            Persistence.SaveAllToDefault();
            //AMQPFramework.Model.AMQPConnection.Shutdown();
        }


 
        private bool firstActivation = true;

        /// <summary>
        /// Called when the main window receives focus
        /// </summary>
        /// <param name="sender">The event generator</param>
        /// <param name="e">The event</param>
        private void TrafodionMainActivated(object sender, EventArgs e)
        {
            // Check to see if it's the first time we've been activated.  We do this here so that the main window is
            // created and visible before the fixup passwords dialog shows.  This would not be the case if we showed 
            // the fixup connections dialog any sooner.  This way it sits nicely in fron fo the main window so that the user 
            // knows why it's there.
            if (firstActivation)
            {

                // It won't be the first time the next time.
                firstActivation = false;
            }

        }

        /// <summary>
        /// The main entry point for One GUI.
        /// </summary>
        [STAThread]
        static void Main()
        {
            // Catch all exceptions
            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(TrafodionMain_UnhandledException);
            Application.ThreadException += new System.Threading.ThreadExceptionEventHandler(TrafodionMain_ThreadException);

            // Create a main application object and run it
            Application.Run(new TrafodionMain());

        }


        /// <summary>
        /// Catch Exceptions on the Application Thread (UI, forms, etc)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        static void TrafodionMain_ThreadException(object sender, System.Threading.ThreadExceptionEventArgs e)
        {
            string errorMessage = (e.Exception.InnerException != null) ? e.Exception.InnerException.Message : e.Exception.Message;

            Logger.OutputErrorLog(errorMessage);
            Logger.OutputErrorLog(e.Exception.StackTrace);

            MessageBox.Show(Utilities.GetForegroundControl(), errorMessage + "\n\n" + 
                Properties.Resources.CheckLogFile + "\n\n" + Logger.ErrorLog, 
                Properties.Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        
        /// <summary>
        /// Catch all other exceptions in the appDomain
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        static void TrafodionMain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            try
            {
                Exception ex = (Exception)e.ExceptionObject;
                string errorMessage = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message;

                LogUnhandledException(e.ExceptionObject, "UnhandledException");

                MessageBox.Show(Utilities.GetForegroundControl(), Properties.Resources.ApplicationError + "\n\n"
                      + errorMessage + "\n\n" + Properties.Resources.PleaseRestartTrafodionManager + "\n\n" + Logger.ErrorLog, Properties.Resources.FatalError,
                      MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            finally
            {
                Application.Exit();
            }
        }

        /// <summary>
        /// Logs the exception information to the DB and also lists all of the assemblis that are loaded
        /// </summary>
        /// <param name="o"></param>
        /// <param name="fromWhere"></param>
        static void LogUnhandledException(Object o, String fromWhere)
        {
            Exception e = o as Exception;

            //AssemblyDescriptionAttribute desc;
            //Assembly executingAssembly = Assembly.GetExecutingAssembly();
            //desc = (AssemblyDescriptionAttribute)AssemblyDescriptionAttribute.GetCustomAttribute(executingAssembly, typeof(AssemblyDescriptionAttribute));

            try
            {
                String errorString = "";
                if (e != null)
                { // Log/Report System.Exception info
                    errorString = "Message = " + e.Message + Environment.NewLine +
                                  "Type = " + fromWhere + ", " +
                                  "Exception = " + e.GetType() + Environment.NewLine +
                                  Environment.NewLine +
                                  "*** Exception Text ***" + Environment.NewLine +
                                  "----------------------" + Environment.NewLine +
                                  e.StackTrace + Environment.NewLine +
                                  //Environment.NewLine +
                                  //"Vproc: " + desc.Description +
                                  Environment.NewLine;

                }
                else
                { // Log/Report exception Object info
                    errorString = "Type = " + fromWhere + ", " +
                                  "Exception = " + o.GetType() + Environment.NewLine +
                                  Environment.NewLine +
                                  "*** Exception Text ***" + Environment.NewLine +
                                  "----------------------" + Environment.NewLine +
                                  o.ToString() + Environment.NewLine +
                                  //Environment.NewLine +
                                  //"Vproc: " + desc.Description +
                                  Environment.NewLine;
                }
                

            }
            catch (Exception exc)
            {
            }
        }
        /// <summary>
        /// Called when the windows menu is about to drop down.  Allows the windows
        /// menu to be properly populated when the user sees it.
        /// </summary>
        /// <param name="sender">The event generator</param>
        /// <param name="e">The event</param>
        private void TheWindowsToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            ToolStripMenuItem theMenu = (ToolStripMenuItem)sender;
            WindowsManager.FixupWindowsMenu(this, theMenu);
        }


        private void NCIToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _nciHandler.LaunchNCI(CurrentConnectionDefinition);
        }

        
        private void customizeAreasToolStripMenuItem_Click(object sender, EventArgs e)
        {

            //Trafodion.Manager.DisplayAreasDialog theDisplayAreasDialog = new Trafodion.Manager.DisplayAreasDialog(AreaNames, hiddenAreaNames);

            //if (theDisplayAreasDialog.ShowDialog() == DialogResult.OK)
            //{
            //    UpdateAreas();
            //}
            
        }
        private void optionsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Dictionary<string, IOptionsProvider> optionProviders = getOptionProviders();
            MainOptionsDialog optionsDialog = new MainOptionsDialog();
            optionsDialog.showOptions(optionProviders);
            optionsDialog.StartPosition = FormStartPosition.CenterParent;
            optionsDialog.ShowDialog(this);

        }

        private Dictionary<string, IOptionsProvider> getOptionProviders()
        {
            Dictionary<string, IOptionsProvider> optionProviders = new Dictionary<string, IOptionsProvider>();
            IOptionsProvider optionsProvider = null;
            //Check if the framework is options provider
            if (this is IOptionsProvider)
            {
                optionProviders.Add(global::Trafodion.Manager.Properties.Resources.ProductOptions, this);
            }

            //Check if the tools are options provider
            foreach (KeyValuePair<string, IOptionsProvider> addedProvider in this._optionProviders)
            {
                optionProviders.Add(addedProvider.Key, addedProvider.Value);
            }

            //Check if the areas are option provider
            foreach (AreaManager theAreaManager in AreaManager.AreaManagers)
            {
                optionsProvider = theAreaManager.TheITrafodionArea as IOptionsProvider;
                if (optionsProvider != null)
                {
                    optionProviders.Add(theAreaManager.TheITrafodionArea.AreaName, optionsProvider);
                }
            }
            return optionProviders;
        }


        private void sqlWhiteboardToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LaunchSQLWhiteboard();
        }

        private void TrafodionMain_Shown(object sender, EventArgs e)
        {
            UpdateActivatedArea();
        }

        private void openToolStripButton_Click(object sender, EventArgs e)
        {

        }

        private void saveToolStripButton_Click(object sender, EventArgs e)
        {

        }

        private void nciToolStripButton_Click(object sender, EventArgs e)
        {

        }

        private void optionsToolStripButton_Click(object sender, EventArgs e)
        {

        }

        private void helpToolStripButton_Click(object sender, EventArgs e)
        {

        }
    }

    /// <summary>
    /// Custom colors to get the XP look and style for the Area buttons
    /// </summary>
    public class CustomProfessionalColors : TrafodionColorTable
    {
        public override Color ToolStripGradientBegin
        {
            get
            {
                return base.ToolStripContentPanelGradientBegin;
            }
        }
        public override Color ToolStripGradientMiddle
        {
            get
            {
                return base.ToolStripContentPanelGradientEnd;
            }
        }
        public override Color ToolStripGradientEnd
        {
            get
            {
                return base.ToolStripContentPanelGradientEnd;
            }
        }
    }

    /// <summary>
    /// Custom colors to get the XP look and style for the Area buttons
    /// </summary>
    public class AreaButtonColors : TrafodionColorTable
    {
        public override Color ToolStripGradientBegin
        {
            get
            {
                return base.ToolStripGradientEnd;
            }
        }
        public override Color ToolStripGradientMiddle
        {
            get
            {
                return base.ToolStripContentPanelGradientEnd;
            }
        }
        public override Color ToolStripGradientEnd
        {
            get
            {
                return base.ToolStripGradientBegin;
            }
        }
    }

    internal class AreaButtonRenderer : TrafodionToolStripRenderer
    {
        // This method handles the RenderButtonBackground event.
        protected override void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
        {
            Graphics g = e.Graphics;
            Rectangle bounds = new Rectangle(Point.Empty, e.Item.Size);

            Color gradientBegin = TrafodionColorTable.ToolStripGradientMiddleColor;//Color.FromArgb(203, 225, 252);
            Color gradientEnd = TrafodionColorTable.ToolStripGradientEndColor;//Color.FromArgb(125, 165, 224);

            ToolStripButton button = e.Item as ToolStripButton;
            if (button.Pressed || button.Checked)
            {
                gradientBegin = TrafodionColorTable.ButtonPressedGradientBeginColor;//Color.FromArgb(254, 128, 62);
                gradientEnd = TrafodionColorTable.ButtonPressedGradientEndColor;//Color.FromArgb(255, 223, 154);
            }
            else if (button.Selected)
            {
                gradientBegin = TrafodionColorTable.ButtonSelectedGradientBeginColor;//Color.FromArgb(255, 255, 222);
                gradientEnd = TrafodionColorTable.ButtonSelectedGradientEndColor;//Color.FromArgb(255, 203, 136);
            }

            using (Brush b = new LinearGradientBrush(
                bounds,
                gradientBegin,
                gradientEnd,
                LinearGradientMode.Vertical))
            {
                g.FillRectangle(b, bounds);
            }

            e.Graphics.DrawRectangle(
                SystemPens.ControlDarkDark,
                bounds);

            g.DrawLine(
                SystemPens.ControlDarkDark,
                bounds.X,
                bounds.Y,
                bounds.Width - 1,
                bounds.Y);

            g.DrawLine(
                SystemPens.ControlDarkDark,
                bounds.X,
                bounds.Y,
                bounds.X,
                bounds.Height - 1);

            ToolStrip toolStrip = button.Owner;
            ToolStripButton nextItem = button.Owner.GetItemAt(
                button.Bounds.X,
                button.Bounds.Bottom + 1) as ToolStripButton;

            if (nextItem == null)
            {
                g.DrawLine(
                    SystemPens.ControlDarkDark,
                    bounds.X,
                    bounds.Height - 1,
                    bounds.X + bounds.Width - 1,
                    bounds.Height - 1);
            }
        }
    }
}
