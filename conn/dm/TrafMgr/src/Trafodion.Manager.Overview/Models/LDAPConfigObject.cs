//
// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2013-2015 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@
//
using System;
using System.Text;
using System.Text.RegularExpressions;
using Trafodion.Manager.Framework;
using Trafodion.Manager.Framework.Connections;

namespace Trafodion.Manager.OverviewArea.Models
{
    /// <summary>
    /// object for all the configs
    /// </summary>
    public class LDAPConfigObject
    {
        const string KEY_TLS_CACERT = "TLS_CACERT";
        const string KEY_TLS_REQCERT = "TLS_REQCERT";
        const string SPACE = " ";
        public const string ENTERPRISE = "Enterprise";
        public const string CLUSTER = "Cluster";
        private const string UserinfoTemplate = "# This file was generated by Trafodion Database Manager at {0}" + LDAPConfigSection.LINE_FEED_UNIX +
                          "# Client name: {1} " + LDAPConfigSection.LINE_FEED_UNIX +
                          "# Database username: {2} " + LDAPConfigSection.LINE_FEED_UNIX +
                          "# External username: {3} " + LDAPConfigSection.LINE_FEED_UNIX +
                          "#" + LDAPConfigSection.LINE_FEED_UNIX;


        private ConnectionDefinition connectionDefinition;
        public LDAPConfigDefaultSection defaultSection;
        public LDAPConfigSection local;
        public LDAPConfigSection remote;
        private Boolean isPreM10 = false;

        public Boolean isPreM10Version
        {
            get
            {
                return isPreM10 || local.isPreM10Version || remote.isPreM10Version;
            }
        }

        public LDAPConfigObject(ConnectionDefinition theconnectionDefinition)
        {
            this.connectionDefinition = theconnectionDefinition;
        }

        /// <summary>
        /// fill this object by input parameters
        /// </summary>
        /// <param name="configContent"></param>
        /// <param name="cerContent"></param>
        public void FillObject(String configContent, String cerContent, String LDAPRCContent)
        {
            String localString = null;
            String remoteString = null;
            String defaultSectionString = null;

            localString = getLastSection(ENTERPRISE, configContent);
            if (localString != null && localString.Trim().Length > 0)
            {
                local = new LDAPConfigSection();
                local.Section = ENTERPRISE;
                local.FillObject(localString);
            }

            remoteString = getLastSection(CLUSTER, configContent);
            if (remoteString != null && remoteString.Trim().Length > 0)
            {
                remote = new LDAPConfigSection();
                remote.Section = CLUSTER;
                remote.FillObject(remoteString);
            }
            //support M8 without section
            if (remote == null && local == null)
            {
                isPreM10 = true;
                local = new LDAPConfigSection();
                local.Section = ENTERPRISE;
                local.FillObject(configContent);
            }

            defaultSection = new LDAPConfigDefaultSection();
            defaultSectionString = getLastSection("Defaults", configContent);
            if (defaultSectionString == null)
            {
                isPreM10 = true;
            }
            defaultSection.FillObject(defaultSectionString, cerContent);
            //if default section is not specified, the last remaining section is default. Otherwise is Enterprise
            if (String.IsNullOrEmpty(defaultSection.defaultSectionName))
            {
                if (local == null && remote != null)
                    defaultSection.defaultSectionName = CLUSTER;
                else
                    defaultSection.defaultSectionName = ENTERPRISE;
            }

            if ((defaultSection.cerLocation == null || defaultSection.cerLocation.Trim().Equals(String.Empty)) && LDAPRCContent != null)
            {
                //analy LDAPRC content
                string[] pairs = LDAPRCContent.Split(new String[] { LDAPConfigSection.LINE_FEED_UNIX }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string item in pairs)
                {
                    if (item.ToLower().Contains(KEY_TLS_CACERT.ToLower()))
                    {
                        if (item.Trim().IndexOf(SPACE) > -1)
                            defaultSection.cerLocation = item.Substring(item.Trim().IndexOf(SPACE)).Trim();
                        //get file name
                        if (defaultSection.cerLocation != null)
                            defaultSection.cerLocation = defaultSection.cerLocation.Substring(defaultSection.cerLocation.LastIndexOf("/") + 1);
                    }
                }
            }
        }

        private string getLastSection(string sectionName,string content)
        {
            string str;

            if (!content.StartsWith("\r\n"))
                content = "\r\n" + content;
            content = Regex.Replace(content, "section:", "SECTION:", RegexOptions.IgnoreCase);
            string[] array = content.Split(new string[] { "\r\nSECTION:" }, StringSplitOptions.RemoveEmptyEntries);
            string section = null;
            foreach (string item in array)
            {
                str = item.Trim();
                if (sectionName.Equals(ENTERPRISE))
                {
                    //section name in the string maybe Enterprise or Local
                    if (str.StartsWith(sectionName, true, null) || str.StartsWith("Local", true, null))
                    {
                        section = str;
                        continue;
                    }
                }
                else if (sectionName.Equals(CLUSTER))
                {
                    if (str.StartsWith(sectionName, true, null) || str.StartsWith("Remote", true, null))
                    {
                        section = str;
                        continue;
                    }
                }
                else if (sectionName.Equals("Defaults"))
                {
                    // to make sure it is secion:defaults rather than DefaultSectionName
                    if (str.StartsWith("Defaults", true, null) &&
                    str.Length > "Defaults".Length && str.Contains("\r\n")
                    && String.IsNullOrEmpty(str.Substring("Defaults".Length, str.IndexOf("\r\n") - "Defaults".Length).Trim()))
                    {
                        section = str;
                        continue;
                    }
                }
            }
            //add removed "SECTION:"
            return section == null ? null : "SECTION:" + section;
        }

        /// <summary>
        /// change LDAPConfig objecct to string(file content)
        /// </summary>
        /// <returns></returns>
        public String LDAPConfigToString()
        {
            StringBuilder configString = new StringBuilder();
            if (local != null)
                local.Section = ENTERPRISE;
            if (remote != null)
                remote.Section = CLUSTER;

            configString.Append(string.Format(UserinfoTemplate,
                new object[] { Utilities.StandardizeDateTime(DateTime.UtcNow + connectionDefinition.ServerGMTOffset), 
                    System.Environment.MachineName, connectionDefinition.DatabaseUserName, connectionDefinition.UserName }));
            configString.Append(LDAPConfigSection.LINE_FEED_UNIX);
            configString.Append(LDAPConfigSection.LINE_FEED_UNIX);

            configString.Append(defaultSection);
            configString.Append(LDAPConfigSection.LINE_FEED_UNIX);

            configString.Append(local);
            configString.Append(LDAPConfigSection.LINE_FEED_UNIX);

            configString.Append(remote);

            return configString.ToString();
        }

        public override bool Equals(Object obj)
        {
            LDAPConfigObject configObj = obj as LDAPConfigObject;
            if (configObj == null)
                return false;
            else
            {
                if (this.local != null && configObj.local != null &&
                    this.remote != null && configObj.remote != null &&
                    this.defaultSection != null && configObj.defaultSection != null)
                {
                    return this.local.Equals(configObj.local) &&
                        this.remote.Equals(configObj.remote) &&
                        this.defaultSection.Equals(configObj.defaultSection);
                }
                else return false;
            }

        }
    }
}
