#! /bin/sh
#
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 1999-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

# Some test suites contain tests that cannot be run concurrently with other tests.
# These test suites are executed in two passes.  The first pass executes tests
# concurrently with other tests.  The second pass executes exclusive tests sequentially.
# The -concurrent and -exclusive command line options indicate which pass to execute.
# Most test suites execute completely during the -concurrent pass.  The -exclusive
# pass is used only for test suites containing tests that cannot be executed concurrently
# with other tests.

# Set defaults: MX-format tables; sequential execution
sqlmxtbls=1
table_format='mx'
ssd='../tools'
concurrent_execution=0
exclusive_execution=0
log_qualifier=
compress_on=0
diffs=0

# Parse command line options.  Options must appear on the command line before
# test names.
while [ "$#" -gt 0 ]; do
  case "$1" in
    -concurrent)
      concurrent_execution=1
      shift
      ;;

    -exclusive)
      exclusive_execution=1
      log_qualifier='.excl'
      shift
      ;;

    -sb)
      sqlmxtbls=1
      table_format='sb'
        export SEABASE_REGRESS=2
      shift
      ;;

    -compress)
      compress_on=1
      shift
      ;;

    -diff)
      diffs=1
      shift
      ;;

    -ssd)
      ssd=${2:?'The -ssd option requires an argument'}
      shift 2
      ;;

    *)
      break
      ;;
  esac
done

if [ "$diffs" -eq 1 -a "$table_format" == "sb" ]; then
  export SEABASE_REGRESS_DIFFS=1
fi

# Override the -compress option with the SQ_FILE_COMPRESSION envvar
# if SQ_FILE_COMPRESSION is set, the compress_on is TRUE
if [ $SQ_FILE_COMPRESSION ]; then
  compress_on=1
  echo "Running with file compression turned on"
fi

  export SQLMX_REGRESS=1
  export SQLMX_NAMETYPE=ANSI
  echo "Running regressions against MX format objects"

echo ""

$REGR_PREOP		# you can set this envvar to any command you like
			# e.g.  export REGR_PREOP="cp $HOME/setupnskenv $RGRT"

export NSK=0
export LINUX=0
export WIN=0

    LINUX=1
    if [ "$scriptsdir" != "" ]; then
      pushd $scriptsdir/tools
      . ./setuplnxenv
      popd
    fi

if [ -r $ssd/setupenv ]; then	# second, generic pan-platform setup
  . $ssd/setupenv
elif [ "$scriptsdir" != "" ]; then
  . $scriptsdir/tools/setupenv
fi

test "$scriptsdir" = "" && echo Scripts root dir env var \$scriptsdir not set. && exit 1
test "$rundir" = "" && echo Run root dir env var \$rundir not set. && exit 1

    export mxcmpdir=${mxcmpdir:-$arkcmpdir}
    export NULL=/dev/null
    export TEMP=${TMP:-${TEMP:-$rundir/tmp}}
    test -f $TEMP -a ! -d $TEMP && TEMP=$rundir/tmpdir
    test ! -d $TEMP && mkdir -p $TEMP
    test ! -d $TEMP -o ! -w $TEMP && TEMP=/tmp

    if [ ! -e $scriptsdir/tools/logsort_linux.exe ]; then
	if [ "$scriptsdir/tools/logsort_src" != "" ]; then
	    pushd $scriptsdir/tools/logsort_src
	    sh makeit_linux.ksh
	    popd
	    mv -f $scriptsdir/tools/logsort_src/logsort.exe $scriptsdir/tools/logsort_linux.exe
	fi
    fi

    export LOGSORT=$scriptsdir/tools/logsort_linux.exe
    export  FILTER=$scriptsdir/tools/regress-filter-linux

    # ln -sf $MY_SQROOT/sql/regress/tools/sqimport $MY_SQROOT/export/bin${SQ_MBTYPE}/import

    export MAKEPARAMS="$mxcmpdir $mxcidir"
    export MAKEOBJTYP=o
    export mxci=$mxcidir/sqlci
    export mxcmp=$mxcmpdir/tdm_arkcmp
    export mxudr=$mxcmpdir/tdm_udrserv
    export javahome=${JAVA_HOME}
    export java=$javahome/bin/java
    export javac=$javahome/bin/javac
    export jar=$javahome/bin/jar
    export NSK_SYS=NSK
    linuxinit=$scriptsdir/tools/linuxinit

# export synonyms for convenience
export sqlci=$mxci
export arkcmp=$mxcmp
export arkcmpdir=$mxcmpdir
export nsk=$NSK
export TMP=$TEMP

# determine regression directories and logs
export REGRBASDIR=$(basename $PWD)
export REGRRUNDIR=$rundir/$REGRBASDIR
export REGRTSTDIR=$scriptsdir/$REGRBASDIR
export rgrlog=$REGRRUNDIR/runregr-${table_format}${log_qualifier}.log
export REGRTOOLSDIR=$scriptsdir/tools

export REGRCONCURRENT="$concurrent_execution"
export REGREXCLUSIVE="$exclusive_execution"
export REGRCOMPRESS="$compress_on"

# setup up make file script, same for mx and mp
export MAKESCRIPT=$scriptsdir/tools/makefileall.ksh

# Single-quoted versions of the REGR* variables
export REGRBASDIR_Q="'$REGRBASDIR'"
export REGRRUNDIR_Q="'$REGRRUNDIR'"
export REGRTSTDIR_Q="'$REGRTSTDIR'"
export REGRRUNDIR_QCleanup="'$REGRRUNDIR/cleanup'"
export REGRRUNDIR_QAB="'$REGRRUNDIR/A/B'"

tmplocal=$TMP/`basename $0 .ksh`.tmp

# Make sure sed commands in $FILTER work --
# otherwise all regressions will come up with ostensible zero diffs
# (falsely reporting SUCCESS)
# because all .flt files will contain the same sed error message!
#
# This can happen when the $FILTER is not write-protected by ClearCase,
# for instance on NSK, and you inadvertently type a stray character
# while looking at the file in an editor.
#
test ! -x $FILTER && chmod +rwx $FILTER		# ensure we can run it
$FILTER $NULL					# run it (emits errmsg if bad)
test $? -ne 0 && echo && echo "ERROR: Your copy of $FILTER is broken." && exit 1

  export SQLUSER1=sql_user1
  export SQLUSER2=sql_user2
  export SQLUSER3=sql_user3
  export SQLUSER4=sql_user4
  export SQLUSER5=sql_user5
  export SQLUSER6=sql_user6
  export SQLUSER7=sql_user7
  export SQLUSER8=sql_user8
  export SQLUSER9=sql_user9
  export SQLUSER10=sql_user10
  export ROLEMGR=role_mgr
  export SQLUSER1X=$SQLUSER1
  export SQLUSER2X=$SQLUSER2
  export SQLUSER3X=$SQLUSER3
  export SQLUSER4X=$SQLUSER4
  export SQLUSER5X=$SQLUSER5
  export SQLUSER6X=$SQLUSER6
  export SQLUSER7X=$SQLUSER7
  export SQLUSER8X=$SQLUSER8
  export SQLUSER9X=$SQLUSER9
  export SQLUSER10X=$SQLUSER10
  export ROLEMGRX=$ROLEMGR

# adding quotes around the user name still causes some tests to fail
# like perhaps executor/test016
  export SQLUSER1Q=$SQLUSER1
  export SQLUSER2Q=\"$SQLUSER2\"
  export SQLUSER3Q=\"$SQLUSER3\"
  export SQLUSER4Q=\"$SQLUSER4\"
  export SQLUSER5Q=\"$SQLUSER5\"
  export SQLUSER6Q=\"$SQLUSER6\"
  export SQLUSER7Q=\"$SQLUSER7\"
  export SQLUSER8Q=\"$SQLUSER8\"
  export SQLUSER9Q=\"$SQLUSER9\"
  export SQLUSER10Q=\"$SQLUSER10\"
  export ROLEMGRQ=\"$ROLEMGR\"

if [ $nsk -eq 1 ]; then
 # Verify user accounts exist on NSK
  bad=0
  i=1
  while test $i -lt 11
  do
    # The comma after the user-name below specifies the (empty) password
    # Without the comma, running this script as an alias user (i.e., not as
    #   super.super) would prompt for a password
    su SQL.USER$i, -c exit
    if
      test $? -eq 1
    then
      echo SQL.USER$i not found
      let bad=1
    fi
    let i=$i+1
  done
  # Verify role.mgr account exist on NSK
  gtacl -s -c 'safecom info user ROLE.MGR' | grep THAWED > /dev/null
  if
    test $? -eq 1
  then
    echo ROLE.MGR not found
    let bad=1
  fi
  if
    test $bad -eq 1
  then
    echo "One or more User Ids are not set up on this machine!! "
    echo "Create the missing User Ids before running security tests."
  fi
else
  # Make sure users required by tests have been registered in the database
  if [ -e $scriptsdir/tools/reg_users.log ]; then
    rm $scriptsdir/tools/reg_users.log
  fi
  sqlci -i $scriptsdir/tools/reg_users.sql > $scriptsdir/tools/reg_users.log 2>&1
  # error 1334 (Object already exists) is the only error that is okay to get
  grep 'ERROR\['  $scriptsdir/tools/reg_users.log | grep -v 'ERROR\[1334\]'
  if [[ $? -ne 1 ]]; then
     echo ""
     echo "Unexpected error registering users.  See $scriptsdir/tools/reg_users.log"
     echo ""
     exit 1
  fi
fi

flavor1=
if [ "$diffs" -ne 1 -o "$table_format" != "sb" ]; then
  echo 'select TESTEXIT;' > $tmplocal.flavor.tmp
  flavor1=`$sqlci -i $tmplocal.flavor.tmp | grep 15001`
fi
flavor2=
if [ "$flavor1" = "" ]; then
  flavor1=DEBUG
else
  flavor1=RELEASE
fi
export BUILD_FLAVOR_TEXT="($flavor1$flavor2 build)"
export BUILD_FLAVOR=`echo $flavor1 | tr A-Z a-z`	# case-sensitive filename lookup (most runregr_xxx.ksh use lowercase for "expectednnn.nsk*")


tool=$scriptsdir/tools/runregr_$REGRBASDIR.ksh
if [ ! -f $tool ]; then
  tool=$scriptsdir/tools/runregr_other.ksh
fi
if [ "$diffs" -eq 1 ]; then
  echo "$tool -diff $*"
else
  echo "$tool $*"
fi
echo "$BUILD_FLAVOR_TEXT"
export PATH="$scriptsdir/tools:$PATH"

# Create the FilteredLogs directory
FilteredLogs=$scriptsdir/FilteredLogs
if [ ! -d "$FilteredLogs" ]; then
echo "Creating directory $FilteredLogs"
mkdir $FilteredLogs
fi

	if [ ! -d "$FilteredLogs/win" ]; then
	echo "Creating directory $FilteredLogs/win"
	mkdir $FilteredLogs/win
	fi
	FilteredLogs=$FilteredLogs/win

if [ ! -d "$FilteredLogs/$REGRBASDIR" ]; then
echo "Creating directory $FilteredLogs/$REGRBASDIR"
mkdir $FilteredLogs/$REGRBASDIR
fi
export FilteredLogs="$FilteredLogs/$REGRBASDIR"

#Delete files left from previous run
rm -f core dumpfile sh_histo ZZSA*


#Establish log, exp and bsl directories
if [ ! -d "$FilteredLogs/logfiles" ]; then
echo "Creating directory $FilteredLogs/logfiles"
mkdir $FilteredLogs/logfiles
fi
if [ ! -d "$FilteredLogs/expfiles" ]; then
echo "Creating directory $FilteredLogs/expfiles"
mkdir $FilteredLogs/expfiles
fi
echo "FilteredLogs:   $FilteredLogs"

if [ "$diffs" -eq 1 ]; then
  echo "Running tool with -diff $*"
  echo "$tool -diff $*"
  $tool -diff $*
else
   echo "Running tool with $*"
  echo "$tool $*"
  $tool $*
fi


# Concatentate logs for test suites that are executed in separate
# concurrent and sequential phases.  The exclusive phase is executed
# after the concurrent phase, so the logs are concatenated at the end
# of the exclusive phase.
if [ "$REGREXCLUSIVE" -ne 0 ]; then
  normal_log="$REGRRUNDIR/runregr-mx.log"
  if [ -a "$normal_log" ]; then
    exclusive_log="$rgrlog"
    echo 'Exclusive (sequential) tests:' | \
      cat - "$exclusive_log" >>"$normal_log" && rm "$exclusive_log"
    rgrlog="$normal_log"
  else
    echo "Error: Log file $normal_log doesn't exist!"
  fi
fi

$REGR_POSTOP		# you can set this envvar to any command you like
			# e.g.  export REGR_POSTOP="$HOME/bin/rgrCleanup"
