>>sh rm -f LOG001-SECONDARY;
>>obey TEST001(compile_libs);
>>--------------------------------------------------------------------------
>>log;
>>
>>obey TEST001(create_tables);
>>--------------------------------------------------------------------------
>>create table clicks (userid char(32), ts TIME(6), ipAddr char(15)) ;

--- SQL operation complete.
>>insert into clicks values
+> ('super-user',cast(time'09:59:59.50 pm' as TIME(6)),'12.345.567.345'),
+> ('super-user',cast(time'11:59:59.50 pm' as TIME(6)),'12.345.567.345'),
+> ('super-services',cast(time'11:59:59.50 pm' as TIME(6)),'12.345.567.345'),
+> ('super-services',cast(time'11:59:59.55 pm' as TIME(6)),'12.345.567.345');

--- 4 row(s) inserted.
>>
>>obey TEST001(register_functions);
>>--------------------------------------------------------------------------
>>
>>create library TEST001 file $$QUOTE$$ $$REGRRUNDIR$$/$$DLL$$ $$QUOTE$$;

--- SQL operation complete.
>>
>>-- the static version of sessionize does not have a compiler interface,
>>-- its result columns are defined in the DDL
>>create table_mapping function sessionize_static(ts_colname char(10),
+>                                                user_colname char(10),
+>                                                timeintval int)
+>returns (session_id largeint,
+>         userid char(32),
+>         ts largeint)
+>external name 'SESSIONIZE_STATIC'
+>library TEST001;

--- SQL operation complete.
>>
>>-- the dynamic version of sessionize uses a compiler interface to
>>-- create result columns that match those of any input table given
>>-- and it validates the column name for session id at compile time
>>create table_mapping function sessionize_dynamic(colname char(10),
+>                                                 user_colname char(10),
+>                                                 timeintval int)
+>external name 'SESSIONIZE_DYNAMIC'
+>library TEST001;

--- SQL operation complete.
>>
>>-- This shows that we can share the same binaries for multiple
>>-- TMUDFs, note that it uses the same external name SESSIONIZE_DYNAMIC
>>create table_mapping function sessionize_dynamic_shared(colname char(10),
+>                                                        user_colname char(10),
+>                                                        timeintval int)
+>external name 'SESSIONIZE_DYNAMIC'
+>library TEST001;

--- SQL operation complete.
>>
>>-- negative test case, the entry point SESSIONIZE_ERR does not exist
>>create table_mapping function sessionize_err(dummy char(10))
+>returns (session_id largeint)
+>external name 'SESSIONIZE_NON_EXISTENT'
+>library TEST001;

--- SQL operation complete.
>>
>>-- Testing a TMUDF with no table-valued inputs
>>create table_mapping function fibonacci(start_row int, num_rows int)
+>returns (ordinal int, fibonacci_number largeint)
+>external name 'fibonacci'
+>library TEST001;

--- SQL operation complete.
>>
>>obey TEST001(tests);
>>--------------------------------------------------------------------------
>>--cqd attempt_esp_parallelism 'off' ;
>>
>>get table_mapping functions for library TEST001 ;

Table_mapping Functions for Library SCH.TEST001
===============================================

SCH.FIBONACCI
SCH.SESSIONIZE_DYNAMIC
SCH.SESSIONIZE_DYNAMIC_SHARED
SCH.SESSIONIZE_ERR
SCH.SESSIONIZE_STATIC

--- SQL operation complete.
>>
>>SELECT cast(CONVERTTIMESTAMP(ts) as TIME(6)), userid, session_id
+>FROM UDF(sessionize_static(TABLE(SELECT userid, JULIANTIMESTAMP(ts) as TS
+>                                 FROM clicks
+>                                 PARTITION BY userid ORDER BY ts),
+>                           cast('TS' as char(2)),
+>                           'USERID',
+>                           60000000)) XO(session_id,userid,ts);

(EXPR)           USERID                            SESSION_ID          
---------------  --------------------------------  --------------------

23:59:59.500000  super-services                                       1
23:59:59.550000  super-services                                       1
21:59:59.500000  super-user                                           1
23:59:59.500000  super-user                                           2

--- 4 row(s) selected.
>>
>>SELECT cast(CONVERTTIMESTAMP(ts) as TIME(6)), userid, session_id, ipAddr
+>FROM UDF(sessionize_dynamic(TABLE(SELECT userid,
+>                                         JULIANTIMESTAMP(ts) as TS,
+>                                         ipAddr
+>                                  FROM clicks
+>                                  PARTITION BY userid ORDER BY ts),
+>                            cast('TS' as char(2)),
+>                            'USERID',
+>                            60000000)) XO;

(EXPR)           USERID                            SESSION_ID            IPADDR
---------------  --------------------------------  --------------------  ---------------

23:59:59.500000  super-services                                       1  12.345.567.345 
23:59:59.550000  super-services                                       1  12.345.567.345 
21:59:59.500000  super-user                                           1  12.345.567.345 
23:59:59.500000  super-user                                           2  12.345.567.345 

--- 4 row(s) selected.
>>
>>-- meant to call sessionize_dynamic_shared, but sharing DLLs
>>-- is not yet working, getting an error so far
>>SELECT *
+>FROM UDF(sessionize_dynamic(TABLE(SELECT userid,
+>                                         JULIANTIMESTAMP(ts) as TS,
+>                                         ipAddr
+>                                  FROM clicks
+>                                  PARTITION BY userid ORDER BY ts),
+>                            cast('TS' as char(2)),
+>                            'USERID',
+>                            60000000)) XO;

SESSION_ID            USERID                            TS                    IPADDR
--------------------  --------------------------------  --------------------  ---------------

                   1  super-services                      212281991999500000  12.345.567.345 
                   1  super-services                      212281991999550000  12.345.567.345 
                   1  super-user                          212281984799500000  12.345.567.345 
                   2  super-user                          212281991999500000  12.345.567.345 

--- 4 row(s) selected.
>>
>>cqd ATTEMPT_ESP_PARALLELISM 'off';

--- SQL operation complete.
>>
>>select *
+>from UDF(fibonacci(1,10)) XO
+>order by 1;

ORDINAL      FIBONACCI_NUMBER    
-----------  --------------------

          1                     1
          2                     1
          3                     2
          4                     3
          5                     5
          6                     8
          7                    13
          8                    21
          9                    34
         10                    55

--- 10 row(s) selected.
>>
>>select sum(fibonacci_number)
+>from UDF(fibonacci(50,10)) XO;

(EXPR)              
--------------------

       2484365770887

--- 1 row(s) selected.
>>
>>-- negative tests
>>select * from udf(sessionize_err('abc')) XOX(a);

*** ERROR[11246] An error occurred locating function 'SESSIONIZE_NON_EXISTENT' in library '/home/jenkins/workspace/core-regress-udr-cdh5.1/rundir/udr/TEST001.dll'.

*** ERROR[11248] A call to dlsym returned errors 0 and 0. Details: 
/home/jenkins/workspace/core-regress-udr-cdh5.1/rundir/udr/TEST001.dll: undefined symbol: SESSIONIZE_NON_EXISTENT.

--- 0 row(s) selected.
>>-- expect errors 11246 and 11248
>>
>>-- these should be caught by the compiler interface
>>select * from udf(sessionize_dynamic('TS')) XOX;

*** ERROR[11252] Expecting three input parameters, ts colname, user id colname, timeout (SQLSTATE 38080)

*** ERROR[8822] The statement was not prepared.

>>-- too few input parameters and not a string
>>select * from udf(sessionize_dynamic(1,2,3)) XOX;

*** ERROR[11252] The first parameter of TMUDF TRAFODION.SCH.SESSIONIZE_DYNAMIC needs to be a compile time character constant (SQLSTATE 38082)

*** ERROR[8822] The statement was not prepared.

>>-- not a string parameter
>>select * from udf(sessionize_dynamic(TABLE(SELECT userid, JULIANTIMESTAMP(ts) as TS
+>                          FROM clicks
+>                          PARTITION BY userid ORDER BY ts),
+>TABLE(SELECT userid, JULIANTIMESTAMP(ts) as TS
+>                          FROM clicks
+>                          PARTITION BY userid ORDER BY ts),
+>cast('TS' as char(2)),
+>                    'USERID',
+>                    60000000)) XOX;

*** ERROR[15001] A syntax error occurred at or before: 
select * from udf(sessionize_dynamic(TABLE(SELECT userid, JULIANTIMESTAMP(ts) a
s TS                           FROM clicks                           PARTITION 
BY userid ORDER BY ts), TABLE(SELECT userid, JULIANTIMESTAMP(ts) as TS         
                  FROM clicks                           PARTITION BY userid ORD
ER BY ts), cast('TS' as char(2)),                     'USERID',                
     60000000)) XOX;
             ^ (409 characters from start of SQL statement)

*** ERROR[8822] The statement was not prepared.

>>-- too many table-valued arguments (syntax error for now)
>>SELECT cast(CONVERTTIMESTAMP(ts) as TIME(6)), userid, session_id
+>FROM UDF(sessionize_dynamic(TABLE(SELECT userid, JULIANTIMESTAMP(ts) as TS
+>                                  FROM clicks
+>                                  PARTITION BY userid ORDER BY ts),
+>                            'NONEXISTENTCOL',
+>                            'USERID',
+>                            60000000)) XOX;

*** ERROR[11252] Column NONEXISTENTCOL not found (SQLSTATE 38904)

*** ERROR[8822] The statement was not prepared.

>>-- non-existent column specified in input parameter
>>log;
